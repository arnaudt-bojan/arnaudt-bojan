import type { PrismaClient } from '../../../generated/prisma';
export interface CreateOrderInput {
    cartId: string;
    shippingAddress: {
        fullName: string;
        addressLine1: string;
        addressLine2?: string;
        city: string;
        state: string;
        postalCode: string;
        country: string;
    };
    billingAddress?: {
        fullName: string;
        addressLine1: string;
        addressLine2?: string;
        city: string;
        state: string;
        postalCode: string;
        country: string;
    };
    paymentMethodId?: string;
    buyerNotes?: string;
}
export interface UpdateFulfillmentInput {
    orderId: string;
    fulfillmentStatus: string;
    trackingNumber?: string;
    carrier?: string;
    trackingUrl?: string;
    estimatedDelivery?: string;
}
export interface IssueRefundInput {
    orderId: string;
    amount: number;
    reason: string;
    refundType: 'full' | 'partial';
}
export interface ProcessBalancePaymentInput {
    orderId: string;
    paymentIntentId: string;
    amountPaid: number;
    currency?: string;
}
export interface ListOrdersFilters {
    sellerId?: string;
    buyerId?: string;
    status?: string;
    first?: number;
    after?: string;
}
export interface ICache {
    invalidate(key: string): Promise<void>;
}
export interface IWebsocketGateway {
    emitOrderUpdate(userId: string, order: any): void;
    emitAnalyticsSaleCompleted(sellerId: string, data: any): void;
}
export declare class OrderDomainService {
    private readonly prisma;
    private readonly websocketGateway?;
    private readonly cache?;
    constructor(prisma: PrismaClient, websocketGateway?: IWebsocketGateway, cache?: ICache);
    getOrder(orderId: string, userId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }>;
    listOrders(filters: ListOrdersFilters): Promise<{
        nodes: {
            id: any;
            orderNumber: any;
            buyerId: any;
            sellerId: any;
            customerName: any;
            customerEmail: any;
            customerAddress: any;
            total: any;
            subtotal: any;
            taxAmount: any;
            shippingCost: any;
            amountPaid: any;
            remainingBalance: any;
            paymentType: any;
            paymentStatus: any;
            status: any;
            fulfillmentStatus: any;
            trackingNumber: any;
            carrier: any;
            trackingUrl: any;
            estimatedDelivery: any;
            currency: any;
            createdAt: any;
            updatedAt: any;
            items: any[];
            events: any[];
            refunds: any[];
        }[];
        pageInfo: {
            hasNextPage: boolean;
            endCursor: string;
        };
    }>;
    getOrdersByBuyer(buyerId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }[]>;
    getOrdersBySeller(sellerId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }[]>;
    createOrder(input: CreateOrderInput, userId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }>;
    updateOrderFulfillment(input: UpdateFulfillmentInput, userId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }>;
    issueRefund(input: IssueRefundInput, userId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }>;
    processBalancePayment(input: ProcessBalancePaymentInput, userId: string): Promise<{
        id: any;
        orderNumber: any;
        buyerId: any;
        sellerId: any;
        customerName: any;
        customerEmail: any;
        customerAddress: any;
        total: any;
        subtotal: any;
        taxAmount: any;
        shippingCost: any;
        amountPaid: any;
        remainingBalance: any;
        paymentType: any;
        paymentStatus: any;
        status: any;
        fulfillmentStatus: any;
        trackingNumber: any;
        carrier: any;
        trackingUrl: any;
        estimatedDelivery: any;
        currency: any;
        createdAt: any;
        updatedAt: any;
        items: any[];
        events: any[];
        refunds: any[];
    }>;
    private mapOrderToGraphQL;
}
