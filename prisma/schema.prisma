generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model analytics_events {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id        String?  @db.VarChar
  user_email     String?  @db.VarChar
  event_type     String   @db.VarChar
  event_category String   @db.VarChar
  event_data     Json?
  created_at     DateTime @default(now()) @db.Timestamp(6)

  @@index([created_at])
  @@index([event_type])
  @@index([user_id])
}

model auth_tokens {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email          String   @db.VarChar
  token          String   @unique(map: "auth_tokens_token_unique") @db.VarChar
  code           String?  @db.VarChar(6)
  token_type     String?  @default("login_code")
  expires_at     DateTime @db.Timestamp(6)
  used           Int?     @default(0)
  seller_context String?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  return_url     String?
  login_context  String?
}

model automation_executions {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  workflow_id          String               @db.VarChar
  subscriber_id        String?              @db.VarChar
  subscriber_email     String?
  trigger_data         Json?
  status               String
  actions_taken        Json?
  error                String?
  executed_at          DateTime?            @default(now()) @db.Timestamp(6)
  subscribers          subscribers?         @relation(fields: [subscriber_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "automation_executions_subscriber_id_subscribers_id_fk")
  newsletter_workflows newsletter_workflows @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "automation_executions_workflow_id_newsletter_workflows_id_fk")

  @@index([executed_at], map: "automation_executions_executed_idx")
  @@index([status])
  @@index([subscriber_id], map: "automation_executions_subscriber_idx")
  @@index([workflow_id], map: "automation_executions_workflow_idx")
}

model background_job_runs {
  id                String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  job_name          String
  status            background_job_status @default(pending)
  started_at        DateTime?             @db.Timestamp(6)
  completed_at      DateTime?             @db.Timestamp(6)
  duration          Int?
  records_processed Int?                  @default(0)
  records_failed    Int?                  @default(0)
  error_message     String?
  error_stack       String?
  retry_count       Int                   @default(0)
  next_retry_at     DateTime?             @db.Timestamp(6)
  metadata          Json?
  created_at        DateTime              @default(now()) @db.Timestamp(6)

  @@index([created_at])
  @@index([job_name])
  @@index([status])
}

model balance_requests {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id           String                 @db.VarChar
  created_by         String                 @db.VarChar
  status             balance_request_status @default(pending)
  session_token_hash String?                @db.VarChar
  expires_at         DateTime?              @db.Timestamp(6)
  pricing_snapshot   Json?
  shipping_snapshot  Json?
  payment_intent_id  String?                @db.VarChar
  balance_due_cents  Int?
  currency           String                 @default("USD") @db.VarChar(3)
  email_sent_at      DateTime?              @db.Timestamp(6)
  created_at         DateTime               @default(now()) @db.Timestamp(6)
  updated_at         DateTime               @default(now()) @db.Timestamp(6)

  @@index([order_id])
  @@index([status])
  @@index([session_token_hash], map: "balance_requests_token_hash_idx")
}

model bulk_upload_items {
  id                  String                  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  job_id              String                  @db.VarChar
  row_number          Int
  row_data            Json
  validation_status   bulk_upload_item_status @default(pending)
  validation_messages Json?
  product_id          String?                 @db.VarChar
  created_at          DateTime                @default(now()) @db.Timestamp(6)

  @@index([job_id], map: "bulk_upload_items_job_idx")
  @@index([product_id], map: "bulk_upload_items_product_idx")
  @@index([validation_status], map: "bulk_upload_items_status_idx")
}

model bulk_upload_jobs {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id      String             @db.VarChar
  file_name      String
  status         bulk_upload_status @default(pending)
  total_rows     Int                @default(0)
  success_count  Int                @default(0)
  error_count    Int                @default(0)
  warning_count  Int                @default(0)
  mappings       Json?
  error_message  String?
  processed_rows Int                @default(0)
  created_at     DateTime           @default(now()) @db.Timestamp(6)
  completed_at   DateTime?          @db.Timestamp(6)

  @@index([seller_id], map: "bulk_upload_jobs_seller_idx")
  @@index([status])
}

model buyer_profiles {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id               String   @unique(map: "buyer_profiles_user_id_unique") @db.VarChar
  company_name          String?
  vat_number            String?  @db.VarChar
  billing_address       Json?
  shipping_address      Json?
  default_payment_terms String?  @default("Net 30") @db.VarChar
  credit_limit          Decimal? @db.Decimal(10, 2)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)

  @@index([user_id])
}

model cancellation_requests {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id         String    @db.VarChar
  buyer_email      String
  buyer_name       String
  reason           String?
  status           String    @default("pending")
  seller_id        String    @db.VarChar
  reviewed_by      String?   @db.VarChar
  reviewed_at      DateTime? @db.Timestamp(6)
  rejection_reason String?
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
}

model cart_items {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  product_id String @db.VarChar
  quantity   Int    @default(1)
}

model cart_sessions {
  session_id String   @id @db.VarChar
  cart_id    String   @db.VarChar
  last_seen  DateTime @default(now()) @db.Timestamp(6)
  carts      carts    @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_sessions_cart_id_carts_id_fk")
}

model carts {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id     String          @db.VarChar
  buyer_id      String?         @db.VarChar
  items         Json            @default("[]")
  status        CartStatus      @default(active)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  cart_sessions cart_sessions[]

  // CRITICAL FIX: Indexes on foreign keys for performance
  @@index([seller_id])
  @@index([buyer_id])
  @@index([seller_id, status])
}

model categories {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name       String
  slug       String    @db.VarChar
  parent_id  String?   @db.VarChar
  level      Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}

model daily_analytics {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  date            DateTime @unique(map: "daily_analytics_date_idx") @db.Timestamp(6)
  new_signups     Int?     @default(0)
  new_sellers     Int?     @default(0)
  new_buyers      Int?     @default(0)
  products_listed Int?     @default(0)
  orders_placed   Int?     @default(0)
  revenue         Decimal? @default(0) @db.Decimal(12, 2)
  active_users    Int?     @default(0)
  created_at      DateTime @default(now()) @db.Timestamp(6)
}

model domain_connections {
  id                            String          @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                     String          @db.VarChar
  domain                        String          @db.VarChar(255)
  normalized_domain             String          @unique(map: "domain_connections_domain_idx") @db.VarChar(255)
  strategy                      domain_strategy @default(cloudflare)
  status                        domain_status   @default(pending_verification)
  verification_token            String          @db.VarChar(64)
  dns_instructions              Json?
  cloudflare_custom_hostname_id String?         @db.VarChar
  caddy_site_id                 String?         @db.VarChar
  ssl_status                    String?         @db.VarChar
  ssl_provider                  String?         @db.VarChar
  ssl_renew_at                  DateTime?       @db.Timestamp(6)
  ssl_issued_at                 DateTime?       @db.Timestamp(6)
  ssl_expires_at                DateTime?       @db.Timestamp(6)
  last_checked_at               DateTime?       @db.Timestamp(6)
  last_verified_at              DateTime?       @db.Timestamp(6)
  failure_reason                String?
  failure_code                  String?         @db.VarChar
  retry_count                   Int             @default(0)
  is_primary                    Int             @default(0)
  created_at                    DateTime        @default(now()) @db.Timestamp(6)
  updated_at                    DateTime        @default(now()) @db.Timestamp(6)

  @@index([cloudflare_custom_hostname_id], map: "domain_connections_cloudflare_hostname_idx")
  @@index([last_checked_at], map: "domain_connections_last_checked_idx")
  @@index([seller_id])
  @@index([ssl_renew_at], map: "domain_connections_ssl_renew_idx")
  @@index([status])
  @@index([strategy, status])
  @@index([verification_token])
}

model failed_webhook_events {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  event_id      String?   @db.VarChar
  provider_name String    @db.VarChar
  payload       String
  error_message String
  retry_count   Int?      @default(0)
  last_retry_at DateTime? @db.Timestamp(6)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  event_type    String    @db.VarChar

  @@index([retry_count, created_at], map: "failed_webhook_events_retry_idx")
}

model feature_adoptions {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id      String    @db.VarChar
  feature_key  String    @db.VarChar
  feature_name String    @db.VarChar
  status       String    @default("pending") @db.VarChar
  adopted_at   DateTime? @db.Timestamp(6)
  dismissed_at DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)

  @@unique([user_id, feature_key], map: "feature_adoptions_user_feature_idx")
  @@index([status])
}

model homepage_cta_options {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  label       String
  variant     String   @default("default") @db.VarChar
  icon        String?  @db.VarChar
  description String?
  url_path    String
  is_active   Int?     @default(1)
  sort_order  Int?     @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)
}

model homepage_media_assets {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  homepage_id String   @db.VarChar
  type        String   @db.VarChar
  object_key  String
  url         String
  alt_text    String?
  focal_point Json?
  duration    Int?
  is_hero     Int?     @default(0)
  sort_order  Int?     @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(6)

  @@index([homepage_id])
}

model import_job_errors {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  job_id        String      @db.VarChar
  external_id   String?
  stage         String
  error_code    String?
  error_message String
  retry_count   Int?        @default(0)
  resolved      Int?        @default(0)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  import_jobs   import_jobs @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "import_job_errors_job_id_import_jobs_id_fk")
}

model import_job_logs {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  job_id       String      @db.VarChar
  level        String
  message      String
  details_json Json?
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  import_jobs  import_jobs @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "import_job_logs_job_id_import_jobs_id_fk")
}

model import_jobs {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  source_id         String              @db.VarChar
  type              String
  status            String              @default("queued")
  total_items       Int?                @default(0)
  processed_items   Int?                @default(0)
  error_count       Int?                @default(0)
  last_checkpoint   String?
  started_at        DateTime?           @db.Timestamp(6)
  finished_at       DateTime?           @db.Timestamp(6)
  created_by        String              @db.VarChar
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  import_job_errors import_job_errors[]
  import_job_logs   import_job_logs[]
  users             users               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "import_jobs_created_by_users_id_fk")
  import_sources    import_sources      @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "import_jobs_source_id_import_sources_id_fk")
}

model import_sources {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id               String                    @db.VarChar
  platform                String
  auth_type               String
  credentials_json        Json
  status                  String                    @default("active")
  metadata                Json?
  auto_publish            Int?                      @default(0)
  last_sync_at            DateTime?                 @db.Timestamp(6)
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  import_jobs             import_jobs[]
  users                   users                     @relation(fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "import_sources_seller_id_users_id_fk")
  product_source_mappings product_source_mappings[]
}

model invitations {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email      String    @db.VarChar
  role       String    @db.VarChar
  invited_by String    @db.VarChar
  status     String    @default("pending") @db.VarChar
  token      String    @unique(map: "invitations_token_unique") @db.VarChar
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model invoices {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id           String   @db.VarChar
  seller_id          String   @db.VarChar
  invoice_number     String   @unique(map: "invoices_invoice_number_unique") @db.VarChar
  document_url       String
  document_type      String   @default("invoice")
  order_type         String
  currency           String   @default("USD") @db.VarChar(3)
  total_amount       Decimal  @db.Decimal(10, 2)
  tax_amount         Decimal? @default(0) @db.Decimal(10, 2)
  po_number          String?  @db.VarChar
  vat_number         String?  @db.VarChar
  incoterms          String?  @db.VarChar
  payment_terms      String?  @db.VarChar
  generated_by       String?  @db.VarChar
  generation_trigger String   @db.VarChar
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)

  @@index([order_id])
  @@index([seller_id])
}

model meta_ad_accounts {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id          String                 @db.VarChar
  meta_user_id       String
  meta_ad_account_id String                 @unique(map: "meta_ad_accounts_meta_account_idx")
  access_token       String
  token_expires_at   DateTime?              @db.Timestamp(6)
  status             meta_ad_account_status @default(connected)
  business_name      String?
  currency           String?                @default("USD") @db.VarChar(3)
  timezone           String?                @default("UTC")
  total_spent        Decimal                @default(0) @db.Decimal(10, 2)
  total_revenue      Decimal                @default(0) @db.Decimal(10, 2)
  last_synced_at     DateTime?              @db.Timestamp(6)
  created_at         DateTime               @default(now()) @db.Timestamp(6)
  updated_at         DateTime               @default(now()) @db.Timestamp(6)
  is_selected        Int                    @default(0)

  @@index([seller_id], map: "meta_ad_accounts_seller_idx")
  @@index([status])
}

model meta_ad_campaigns {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                String    @db.VarChar
  meta_campaign_id         String?   @unique(map: "meta_ad_campaigns_meta_campaign_id_unique") @db.VarChar
  campaign_name            String
  objective                String    @default("OUTCOME_SALES") @db.VarChar
  status                   String    @default("paused") @db.VarChar
  product_ids              String[]
  ad_copy                  String
  headline                 String
  call_to_action           String?   @default("SHOP_NOW") @db.VarChar
  target_countries         String[]
  target_languages         String[]
  target_age_min           Int?      @default(18)
  target_age_max           Int?      @default(65)
  target_gender            String?   @db.VarChar
  advantage_plus_enabled   Int?      @default(1)
  advantage_audience       Int?      @default(1)
  advantage_placements     Int?      @default(1)
  daily_budget             Decimal   @db.Decimal(10, 2)
  total_budget             Decimal   @db.Decimal(10, 2)
  start_date               DateTime  @db.Timestamp(6)
  end_date                 DateTime? @db.Timestamp(6)
  amount_charged           Decimal?  @default(0) @db.Decimal(10, 2)
  meta_spend               Decimal?  @default(0) @db.Decimal(10, 2)
  platform_fee             Decimal?  @default(0) @db.Decimal(10, 2)
  remaining_budget         Decimal?  @default(0) @db.Decimal(10, 2)
  stripe_payment_intent_id String?   @db.VarChar
  impressions              Int?      @default(0)
  clicks                   Int?      @default(0)
  conversions              Int?      @default(0)
  reach                    Int?      @default(0)
  ctr                      Decimal?  @default(0) @db.Decimal(5, 2)
  cpc                      Decimal?  @default(0) @db.Decimal(10, 2)
  error_message            String?
  last_sync_at             DateTime? @db.Timestamp(6)
  created_at               DateTime  @default(now()) @db.Timestamp(6)
  updated_at               DateTime  @default(now()) @db.Timestamp(6)

  @@index([seller_id])
  @@index([status])
}

model meta_ad_payments {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id              String   @db.VarChar
  seller_id                String   @db.VarChar
  amount                   Decimal  @db.Decimal(10, 2)
  meta_spend               Decimal  @db.Decimal(10, 2)
  platform_fee             Decimal  @db.Decimal(10, 2)
  stripe_payment_intent_id String   @db.VarChar
  payment_status           String   @default("pending") @db.VarChar
  payment_type             String   @db.VarChar
  refund_amount            Decimal? @db.Decimal(10, 2)
  refund_reason            String?
  created_at               DateTime @default(now()) @db.Timestamp(6)

  @@index([campaign_id])
  @@index([seller_id])
}

model meta_ad_performance {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id      String   @db.VarChar
  meta_campaign_id String?  @db.VarChar
  date             String   @db.VarChar
  impressions      Int?     @default(0)
  clicks           Int?     @default(0)
  conversions      Int?     @default(0)
  reach            Int?     @default(0)
  spend            Decimal? @default(0) @db.Decimal(10, 2)
  ctr              Decimal? @default(0) @db.Decimal(5, 2)
  cpc              Decimal? @default(0) @db.Decimal(10, 2)
  cpm              Decimal? @default(0) @db.Decimal(10, 2)
  conversion_rate  Decimal? @default(0) @db.Decimal(5, 2)
  created_at       DateTime @default(now()) @db.Timestamp(6)

  @@index([campaign_id])
  @@index([date])
}

model meta_campaign_finance {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                String                @db.VarChar
  campaign_id              String?               @db.VarChar
  transaction_type         meta_transaction_type
  amount                   Decimal               @db.Decimal(10, 2)
  currency                 String                @default("USD") @db.VarChar(3)
  stripe_payment_intent_id String?
  meta_transaction_id      String?
  upfirst_fee_amount       Decimal?              @db.Decimal(10, 2)
  description              String?
  metadata                 Json?
  created_at               DateTime              @default(now()) @db.Timestamp(6)

  @@index([campaign_id], map: "meta_campaign_finance_campaign_idx")
  @@index([seller_id], map: "meta_campaign_finance_seller_idx")
  @@index([stripe_payment_intent_id], map: "meta_campaign_finance_stripe_idx")
  @@index([transaction_type], map: "meta_campaign_finance_type_idx")
}

model meta_campaign_metrics_daily {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id    String   @db.VarChar
  date           DateTime @db.Timestamp(6)
  impressions    Int      @default(0)
  clicks         Int      @default(0)
  reach          Int      @default(0)
  frequency      Decimal? @default(0) @db.Decimal(5, 2)
  likes          Int      @default(0)
  comments       Int      @default(0)
  shares         Int      @default(0)
  saves          Int      @default(0)
  link_clicks    Int      @default(0)
  website_visits Int      @default(0)
  purchases      Int      @default(0)
  revenue        Decimal? @default(0) @db.Decimal(10, 2)
  spend          Decimal  @default(0) @db.Decimal(10, 2)
  cpm            Decimal? @default(0) @db.Decimal(10, 4)
  cpc            Decimal? @default(0) @db.Decimal(10, 4)
  ctr            Decimal? @default(0) @db.Decimal(5, 2)
  roas           Decimal? @default(0) @db.Decimal(10, 2)
  created_at     DateTime @default(now()) @db.Timestamp(6)

  @@unique([campaign_id, date], map: "meta_metrics_campaign_date_idx")
  @@index([date], map: "meta_metrics_date_idx")
}

model meta_campaigns {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id             String                  @db.VarChar
  ad_account_id         String                  @db.VarChar
  product_id            String                  @db.VarChar
  name                  String
  status                meta_campaign_status    @default(draft)
  objective             meta_campaign_objective @default(OUTCOME_TRAFFIC)
  meta_campaign_id      String?
  meta_ad_set_id        String?
  meta_ad_id            String?
  primary_text          String
  headline              String
  description           String?
  call_to_action        String?                 @default("SHOP_NOW")
  targeting             Json
  daily_budget          Decimal                 @db.Decimal(10, 2)
  lifetime_budget       Decimal                 @db.Decimal(10, 2)
  start_date            DateTime                @db.Timestamp(6)
  end_date              DateTime?               @db.Timestamp(6)
  use_advantage_plus    Int                     @default(1)
  advantage_plus_config Json?
  alert_email           String
  low_budget_threshold  Decimal                 @default(20) @db.Decimal(5, 2)
  activated_at          DateTime?               @db.Timestamp(6)
  paused_at             DateTime?               @db.Timestamp(6)
  completed_at          DateTime?               @db.Timestamp(6)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)

  @@index([ad_account_id], map: "meta_campaigns_ad_account_idx")
  @@index([meta_campaign_id], map: "meta_campaigns_meta_id_idx")
  @@index([product_id], map: "meta_campaigns_product_idx")
  @@index([seller_id], map: "meta_campaigns_seller_idx")
  @@index([status])
}

model meta_settings {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id       String    @unique(map: "meta_settings_user_id_unique") @db.VarChar
  access_token  String?
  ad_account_id String?   @db.VarChar
  account_name  String?   @db.VarChar
  connected     Int?      @default(0)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
}

model music_tracks {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  provider          String   @default("pixabay") @db.VarChar
  provider_track_id String   @db.VarChar
  title             String
  artist            String
  duration          Int
  preview_url       String
  stream_url        String?
  download_url      String?
  genre             String?  @db.VarChar
  mood              String?  @db.VarChar
  tags              String[]
  waveform          String?
  license_tier      String?  @default("free") @db.VarChar
  license_url       String?
  is_active         Int?     @default(1)
  created_at        DateTime @default(now()) @db.Timestamp(6)

  @@index([genre])
  @@index([provider])
}

model newsletter_ab_tests {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id       String      @db.VarChar
  variant_a_subject String
  variant_a_content String
  variant_b_subject String
  variant_b_content String
  split_percentage  Int?        @default(50)
  winner_metric     String
  status            String      @default("running")
  winner_id         String?
  variant_a_sent    Int?        @default(0)
  variant_a_opened  Int?        @default(0)
  variant_a_clicked Int?        @default(0)
  variant_b_sent    Int?        @default(0)
  variant_b_opened  Int?        @default(0)
  variant_b_clicked Int?        @default(0)
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  completed_at      DateTime?   @db.Timestamp(6)
  newsletters       newsletters @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_ab_tests_campaign_id_newsletters_id_fk")

  @@index([campaign_id], map: "newsletter_ab_tests_campaign_idx")
  @@index([status])
}

model newsletter_analytics {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  newsletter_id      String      @unique(map: "newsletter_analytics_newsletter_id_unique") @db.VarChar
  user_id            String      @db.VarChar
  total_sent         Int?        @default(0)
  total_delivered    Int?        @default(0)
  total_opened       Int?        @default(0)
  total_clicked      Int?        @default(0)
  total_bounced      Int?        @default(0)
  total_unsubscribed Int?        @default(0)
  open_rate          Decimal?    @db.Decimal(5, 2)
  click_rate         Decimal?    @db.Decimal(5, 2)
  bounce_rate        Decimal?    @db.Decimal(5, 2)
  last_updated       DateTime?   @default(now()) @db.Timestamp(6)
  created_at         DateTime?   @default(now()) @db.Timestamp(6)
  newsletters        newsletters @relation(fields: [newsletter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_analytics_newsletter_id_newsletters_id_fk")
}

model newsletter_conversions {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id      String      @db.VarChar
  subscriber_email String
  conversion_type  String
  conversion_value Decimal?    @db.Decimal(10, 2)
  metadata         Json?
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  newsletters      newsletters @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_conversions_campaign_id_newsletters_id_fk")

  @@index([campaign_id], map: "newsletter_conversions_campaign_idx")
  @@index([subscriber_email], map: "newsletter_conversions_email_idx")
  @@index([conversion_type], map: "newsletter_conversions_type_idx")
}

model newsletter_events {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  newsletter_id    String      @db.VarChar
  recipient_email  String
  event_type       String
  event_data       Json?
  webhook_event_id String?
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  newsletters      newsletters @relation(fields: [newsletter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_events_newsletter_id_newsletters_id_fk")

  @@unique([newsletter_id, recipient_email, event_type], map: "newsletter_events_recipient_event_unique")
  @@index([webhook_event_id])
}

model newsletter_jobs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  type          String
  data          Json
  priority      Int?      @default(0)
  scheduled_for DateTime? @db.Timestamp(6)
  max_retries   Int?      @default(3)
  retry_count   Int?      @default(0)
  status        String    @default("queued")
  started_at    DateTime? @db.Timestamp(6)
  completed_at  DateTime? @db.Timestamp(6)
  error         String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)

  @@index([scheduled_for], map: "newsletter_jobs_scheduled_idx")
  @@index([status])
  @@index([type])
}

model newsletter_schedule {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  campaign_id  String      @db.VarChar
  scheduled_at DateTime    @db.Timestamp(6)
  timezone     String      @default("UTC")
  recurrence   String?
  status       String      @default("pending")
  locked_at    DateTime?   @db.Timestamp(6)
  locked_by    String?
  sent_at      DateTime?   @db.Timestamp(6)
  error        String?
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  newsletters  newsletters @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_schedule_campaign_id_newsletters_id_fk")

  @@index([campaign_id], map: "newsletter_schedule_campaign_idx")
  @@index([scheduled_at], map: "newsletter_schedule_scheduled_idx")
  @@index([status])
}

model newsletter_segments {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id           String    @db.VarChar
  name              String
  description       String?
  rules             Json
  subscriber_count  Int?      @default(0)
  last_evaluated_at DateTime? @db.Timestamp(6)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_segments_user_id_users_id_fk")

  @@index([name])
  @@index([user_id], map: "newsletter_segments_user_idx")
}

model newsletter_templates {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id      String    @db.VarChar
  name         String
  subject      String
  content      String
  html_content String?
  images       Json?
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
}

model newsletter_workflows {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id               String                  @db.VarChar
  name                  String
  type                  String
  trigger               Json
  actions               Json
  status                String                  @default("draft")
  execution_count       Int?                    @default(0)
  last_executed_at      DateTime?               @db.Timestamp(6)
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  automation_executions automation_executions[]
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "newsletter_workflows_user_id_users_id_fk")

  @@index([status])
  @@index([type])
  @@index([user_id], map: "newsletter_workflows_user_idx")
}

model newsletters {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                String                   @db.VarChar
  subject                String
  content                String
  html_content           String?
  recipients             Json
  group_ids              String[]
  images                 Json?
  status                 String                   @default("draft")
  sent_at                DateTime?                @db.Timestamp(6)
  resend_batch_id        String?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  preheader              String?
  from_name              String?
  segment_ids            String[]
  newsletter_ab_tests    newsletter_ab_tests[]
  newsletter_analytics   newsletter_analytics?
  newsletter_conversions newsletter_conversions[]
  newsletter_events      newsletter_events[]
  newsletter_schedule    newsletter_schedule[]
}

model nft_mints {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id              String    @db.VarChar
  user_id               String    @db.VarChar
  mint_address          String
  transaction_signature String
  metadata              Json
  created_at            DateTime? @default(now()) @db.Timestamp(6)
}

model notifications {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id    String   @db.VarChar
  type       String
  title      String
  message    String
  email_sent Int?     @default(0)
  email_id   String?
  read       Int?     @default(0)
  metadata   Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
}

model order_address_changes {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id                     String   @db.VarChar
  balance_request_id           String?  @db.VarChar
  changed_by                   String?  @db.VarChar
  previous_address             Json
  new_address                  Json
  previous_shipping_cost_cents Int?
  new_shipping_cost_cents      Int?
  reason                       String?
  created_at                   DateTime @default(now()) @db.Timestamp(6)

  @@index([balance_request_id], map: "address_changes_balance_request_idx")
  @@index([order_id], map: "address_changes_order_id_idx")
}

model order_balance_payments {
  id                       String                       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id                 String                       @db.VarChar
  amount_due               Decimal                      @db.Decimal(10, 2)
  amount_paid              Decimal                      @default(0) @db.Decimal(10, 2)
  currency                 String                       @db.VarChar(3)
  status                   order_balance_payment_status @default(pending)
  stripe_payment_intent_id String?                      @db.VarChar
  requested_at             DateTime?                    @db.Timestamp(6)
  paid_at                  DateTime?                    @db.Timestamp(6)
  email_sent_at            DateTime?                    @db.Timestamp(6)
  last_reminder_at         DateTime?                    @db.Timestamp(6)
  created_at               DateTime                     @default(now()) @db.Timestamp(6)
  updated_at               DateTime                     @default(now()) @db.Timestamp(6)

  @@index([order_id], map: "balance_payments_order_id_idx")
  @@index([status], map: "balance_payments_status_idx")
}

model order_events {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id     String           @db.VarChar
  event_type   order_event_type
  payload      Json?
  description  String?
  performed_by String?          @db.VarChar
  occurred_at  DateTime         @default(now()) @db.Timestamp(6)

  @@index([occurred_at])
  @@index([order_id])
}

model order_items {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id                  String    @db.VarChar
  product_id                String    @db.VarChar
  product_name              String
  product_image             String?
  product_type              String
  quantity                  Int
  price                     Decimal   @db.Decimal(10, 2)
  subtotal                  Decimal   @db.Decimal(10, 2)
  deposit_amount            Decimal?  @db.Decimal(10, 2)
  requires_deposit          Int?      @default(0)
  variant                   Json?
  item_status               OrderStatus @default(pending)
  tracking_number           String?   @db.VarChar
  tracking_carrier          String?   @db.VarChar
  tracking_url              String?
  tracking_link             String?
  shipped_at                DateTime? @db.Timestamp(6)
  delivered_at              DateTime? @db.Timestamp(6)
  refunded_quantity         Int?      @default(0)
  refunded_amount           Decimal?  @default(0) @db.Decimal(10, 2)
  returned_at               DateTime? @db.Timestamp(6)
  refunded_at               DateTime? @db.Timestamp(6)
  created_at                DateTime  @default(now()) @db.Timestamp(6)
  updated_at                DateTime  @default(now()) @db.Timestamp(6)
  balance_amount            Decimal?  @db.Decimal(10, 2)
  original_price            Decimal?  @db.Decimal(10, 2)
  discount_percentage       Decimal?  @db.Decimal(5, 2)
  discount_amount           Decimal?  @db.Decimal(10, 2)
  product_sku               String?   @db.VarChar
  variant_sku               String?   @db.VarChar
  pre_order_date            DateTime? @db.Timestamp(6)
  made_to_order_lead_time   Int?
  delivery_reminder_sent_at DateTime? @db.Timestamp(6)
  
  // CRITICAL FIX: Cascade delete + indexes for performance
  orders                    orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_id])
  @@index([product_id])
  @@index([order_id, product_id])
}

model order_workflow_events {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  workflow_id String              @db.VarChar
  event_type  workflow_event_type
  from_state  workflow_state?
  to_state    workflow_state?
  payload     Json?
  error       String?
  occurred_at DateTime            @default(now()) @db.Timestamp(6)

  @@index([occurred_at], map: "workflow_events_occurred_at_idx")
  @@index([workflow_id], map: "workflow_events_workflow_id_idx")
}

model order_workflows {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  checkout_session_id String         @unique(map: "order_workflows_checkout_session_idx") @db.VarChar
  order_id            String?        @db.VarChar
  payment_intent_id   String?        @db.VarChar
  status              String         @default("running")
  current_state       workflow_state @default(INIT)
  data                Json?
  error               String?
  error_code          String?        @db.VarChar
  retry_count         Int?           @default(0)
  last_retry_at       DateTime?      @db.Timestamp(6)
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @default(now()) @db.Timestamp(6)

  @@index([order_id])
  @@index([payment_intent_id], map: "order_workflows_payment_intent_idx")
  @@index([status, current_state], map: "order_workflows_status_state_idx")
}

model orders {
  id                               String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                          String?          @db.VarChar
  customer_name                    String
  customer_email                   String
  customer_address                 String
  items                            String
  total                            Decimal          @db.Decimal(10, 2)
  amount_paid                      Decimal?         @default(0) @db.Decimal(10, 2)
  remaining_balance                Decimal?         @default(0) @db.Decimal(10, 2)
  payment_type                     String?          @default("full")
  payment_status                   String?          @default("pending")
  stripe_payment_intent_id         String?          @db.VarChar
  stripe_balance_payment_intent_id String?          @db.VarChar
  status                           OrderStatus      @default(pending)
  fulfillment_status               String?          @default("unfulfilled")
  tracking_number                  String?          @db.VarChar
  tracking_link                    String?
  created_at                       DateTime         @default(now()) @db.Timestamp(6)
  updated_at                       DateTime         @default(now()) @db.Timestamp(6)
  tax_amount                       Decimal?         @default(0) @db.Decimal(10, 2)
  tax_calculation_id               String?          @db.VarChar
  tax_breakdown                    Json?
  subtotal_before_tax              Decimal?         @db.Decimal(10, 2)
  currency                         String?          @default("USD") @db.VarChar(3)
  shipping_cost                    Decimal?         @db.Decimal(10, 2)
  shipping_method                  String?          @db.VarChar
  shipping_zone                    String?          @db.VarChar
  shipping_carrier                 String?          @db.VarChar
  shipping_estimated_days          String?          @db.VarChar
  shipping_street                  String?
  shipping_city                    String?
  shipping_state                   String?
  shipping_postal_code             String?          @db.VarChar
  shipping_country                 String?          @db.VarChar
  deposit_amount_cents             Int?
  balance_due_cents                Int?
  balance_paid_at                  DateTime?        @db.Timestamp(6)
  shipping_locked                  Int?             @default(0)
  pricing_version                  Int?             @default(1)
  seller_id                        String?          @db.VarChar
  billing_name                     String?
  billing_email                    String?
  billing_phone                    String?          @db.VarChar
  billing_street                   String?
  billing_city                     String?
  billing_state                    String?
  billing_postal_code              String?          @db.VarChar
  billing_country                  String?          @db.VarChar
  shipping_label_id                String?          @db.VarChar
  shipping_labels                  shipping_labels? @relation(fields: [shipping_label_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_shipping_label_id_shipping_labels_id_fk")
  order_items                      order_items[]

  // CRITICAL FIX: Indexes on foreign keys for performance
  @@index([user_id])
  @@index([seller_id])
  @@index([user_id, status])
  @@index([seller_id, status])
  @@index([created_at])
}

model packing_slips {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id            String   @db.VarChar
  seller_id           String   @db.VarChar
  packing_slip_number String   @unique(map: "packing_slips_packing_slip_number_unique") @db.VarChar
  document_url        String
  document_type       String   @default("packing_slip")
  warehouse_notes     String?
  gift_message        String?
  includes_pricing    Int?     @default(0)
  generated_by        String?  @db.VarChar
  generation_trigger  String   @db.VarChar
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)

  @@index([order_id])
  @@index([seller_id])
}

model payment_intents {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  provider_name      String   @db.VarChar
  provider_intent_id String   @db.VarChar
  amount             Int
  currency           String   @db.VarChar(3)
  status             String   @db.VarChar
  client_secret      String?
  metadata           Json?
  idempotency_key    String   @unique(map: "payment_intents_idempotency_key_unique") @db.VarChar
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)

  @@index([idempotency_key])
  @@index([provider_intent_id], map: "payment_intents_provider_intent_idx")
}

model product_source_mappings {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  product_id          String         @db.VarChar
  source_id           String         @db.VarChar
  external_product_id String
  external_variant_id String?
  external_handle     String?
  last_synced_at      DateTime       @default(now()) @db.Timestamp(6)
  sync_state          String         @default("active")
  checksum            String?
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @default(now()) @db.Timestamp(6)
  products            products       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_source_mappings_product_id_products_id_fk")
  import_sources      import_sources @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_source_mappings_source_id_import_sources_id_fk")

  @@unique([product_id, source_id], map: "product_source_mappings_product_source_unique")
  @@unique([product_id, source_id, external_product_id], map: "unique_product_source_mapping")
}

model products {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id               String                    @db.VarChar
  name                    String
  description             String
  price                   Decimal                   @db.Decimal(10, 2)
  image                   String
  images                  String[]
  category                String
  category_level_1_id     String?                   @db.VarChar
  category_level_2_id     String?                   @db.VarChar
  category_level_3_id     String?                   @db.VarChar
  product_type            String
  stock                   Int?                      @default(0)
  deposit_amount          Decimal?                  @db.Decimal(10, 2)
  requires_deposit        Int?                      @default(0)
  variants                Json?
  made_to_order_days      Int?
  pre_order_date          DateTime?                 @db.Timestamp(6)
  discount_percentage     Decimal?                  @db.Decimal(5, 2)
  promotion_active        Int?                      @default(0)
  promotion_end_date      DateTime?                 @db.Timestamp(6)
  shipping_type           String?                   @default("flat")
  flat_shipping_rate      Decimal?                  @db.Decimal(10, 2)
  shipping_matrix_id      String?                   @db.VarChar
  shippo_weight           Decimal?                  @db.Decimal(10, 2)
  shippo_length           Decimal?                  @db.Decimal(10, 2)
  shippo_width            Decimal?                  @db.Decimal(10, 2)
  shippo_height           Decimal?                  @db.Decimal(10, 2)
  shippo_template         String?                   @db.VarChar
  status                  ProductStatus             @default(draft)
  has_colors              Int?                      @default(0)
  sku                     String?
  slug                    String?                   @db.VarChar
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  product_source_mappings product_source_mappings[]

  @@index([seller_id, slug])
}

model refund_line_items {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  refund_id     String                @db.VarChar
  order_item_id String?               @db.VarChar
  type          refund_line_item_type
  quantity      Int?
  amount        Decimal               @db.Decimal(10, 2)
  description   String?
  created_at    DateTime              @default(now()) @db.Timestamp(6)

  @@index([order_item_id])
  @@index([refund_id])
}

model refunds {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id             String   @db.VarChar
  total_amount         Decimal  @db.Decimal(10, 2)
  reason               String?
  stripe_refund_id     String?  @db.VarChar
  status               String   @default("pending")
  processed_by         String   @db.VarChar
  created_at           DateTime @default(now()) @db.Timestamp(6)
  wholesale_order_id   String?  @db.VarChar
  wholesale_payment_id String?  @db.VarChar
  currency             String   @default("USD") @db.VarChar(3)

  @@index([order_id])
  @@index([status])
}

model return_requests {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id               String    @db.VarChar
  order_item_id          String?   @db.VarChar
  buyer_email            String
  buyer_name             String
  reason                 String?
  status                 String    @default("pending")
  seller_id              String    @db.VarChar
  reviewed_by            String?   @db.VarChar
  reviewed_at            DateTime? @db.Timestamp(6)
  rejection_reason       String?
  return_method          String?
  shipping_label_url     String?
  buyer_tracking_number  String?   @db.VarChar
  buyer_tracking_carrier String?   @db.VarChar
  buyer_tracking_image   String?
  buyer_shipped_at       DateTime? @db.Timestamp(6)
  received_at            DateTime? @db.Timestamp(6)
  refund_processed_at    DateTime? @db.Timestamp(6)
  created_at             DateTime  @default(now()) @db.Timestamp(6)
  updated_at             DateTime  @default(now()) @db.Timestamp(6)
}

model saved_addresses {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id        String   @db.VarChar
  full_name      String   @db.VarChar
  address_line_1 String
  address_line_2 String?
  city           String   @db.VarChar
  state          String   @db.VarChar
  postal_code    String   @db.VarChar
  country        String   @default("US") @db.VarChar
  phone          String?  @db.VarChar
  is_default     Int?     @default(0)
  label          String?  @db.VarChar
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)

  @@index([user_id])
}

model saved_payment_methods {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                  String   @db.VarChar
  stripe_payment_method_id String   @unique(map: "saved_payment_methods_stripe_payment_method_id_unique") @db.VarChar
  card_brand               String?  @db.VarChar
  card_last4               String?  @db.VarChar
  card_exp_month           Int?
  card_exp_year            Int?
  is_default               Int?     @default(0)
  label                    String?  @db.VarChar
  created_at               DateTime @default(now()) @db.Timestamp(6)
  updated_at               DateTime @default(now()) @db.Timestamp(6)

  @@index([user_id])
}

model seller_credit_ledgers {
  id                String                      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id         String                      @db.VarChar
  label_id          String?                     @db.VarChar
  order_id          String?                     @db.VarChar
  type              seller_credit_ledger_type
  amount_usd        Decimal                     @db.Decimal(10, 2)
  balance_after     Decimal                     @db.Decimal(10, 2)
  source            seller_credit_ledger_source
  metadata          Json?
  currency          String?                     @default("USD") @db.VarChar(3)
  exchange_rate     Decimal?                    @db.Decimal(12, 6)
  created_at        DateTime                    @default(now()) @db.Timestamp(6)
  stripe_session_id String?                     @db.VarChar

  @@index([created_at])
  @@index([seller_id])
}

model seller_homepages {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                 String    @unique(map: "seller_homepages_seller_id_idx") @db.VarChar
  status                    String    @default("draft") @db.VarChar
  template_key              String    @default("hero-cta") @db.VarChar
  desktop_config            Json
  mobile_config             Json
  hero_media_id             String?   @db.VarChar
  hero_media_type           String?   @db.VarChar
  headline                  String
  body_copy                 String
  selected_cta_id           String    @db.VarChar
  music_track_id            String?   @db.VarChar
  music_enabled             Int?      @default(0)
  auto_redirect_to_homepage Int?      @default(0)
  last_published_at         DateTime? @db.Timestamp(6)
  published_desktop_config  Json?
  published_mobile_config   Json?
  created_at                DateTime  @default(now()) @db.Timestamp(6)
  updated_at                DateTime  @default(now()) @db.Timestamp(6)
}

model sessions {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model shipping_label_refunds {
  id               String                       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  label_id         String                       @db.VarChar
  shippo_refund_id String?                      @unique(map: "shipping_label_refunds_shippo_refund_id_unique") @db.VarChar
  status           shipping_label_refund_status @default(queued)
  requested_at     DateTime                     @default(now()) @db.Timestamp(6)
  resolved_at      DateTime?                    @db.Timestamp(6)
  rejection_reason String?
  created_at       DateTime                     @default(now()) @db.Timestamp(6)
  updated_at       DateTime                     @default(now()) @db.Timestamp(6)

  @@index([label_id])
  @@index([status])
}

model shipping_labels {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_id              String                @db.VarChar
  seller_id             String                @db.VarChar
  shippo_transaction_id String?               @unique(map: "shipping_labels_shippo_transaction_id_unique") @db.VarChar
  shippo_rate_id        String?               @db.VarChar
  base_cost_usd         Decimal               @db.Decimal(10, 2)
  markup_percent        Decimal?              @default(20.00) @db.Decimal(5, 2)
  total_charged_usd     Decimal               @db.Decimal(10, 2)
  label_url             String?
  tracking_number       String?               @db.VarChar
  carrier               String?               @db.VarChar
  service_level_name    String?               @db.VarChar
  status                shipping_label_status @default(pending)
  purchased_at          DateTime?             @db.Timestamp(6)
  voided_at             DateTime?             @db.Timestamp(6)
  currency              String?               @default("USD") @db.VarChar(3)
  exchange_rate_applied Decimal?              @db.Decimal(12, 6)
  created_at            DateTime              @default(now()) @db.Timestamp(6)
  updated_at            DateTime              @default(now()) @db.Timestamp(6)
  orders                orders[]

  @@index([order_id])
  @@index([seller_id])
  @@index([status])
}

model shipping_matrices {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id   String   @db.VarChar
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model shipping_zones {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  matrix_id       String  @db.VarChar
  zone_type       String
  zone_name       String
  zone_code       String? @db.VarChar
  rate            Decimal @db.Decimal(10, 2)
  estimated_days  Int?
  zone_identifier String?
  metadata        String?
}

model stock_reservations {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  product_id   String    @db.VarChar
  variant_id   String?   @db.VarChar
  quantity     Int
  order_id     String?   @db.VarChar
  session_id   String?   @db.VarChar
  user_id      String?   @db.VarChar
  status       String    @default("active")
  expires_at   DateTime  @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  committed_at DateTime? @db.Timestamp(6)
  released_at  DateTime? @db.Timestamp(6)

  @@index([expires_at], map: "stock_res_expires_at_idx")
  @@index([product_id, variant_id, status], map: "stock_res_prod_var_status_idx")
  @@index([session_id], map: "stock_res_session_idx")
}

model store_invitations {
  id                                                String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  store_owner_id                                    String    @db.VarChar
  invitee_email                                     String    @db.VarChar
  invited_by_user_id                                String    @db.VarChar
  status                                            String    @default("pending") @db.VarChar
  token                                             String    @unique(map: "store_invitations_token_unique") @db.VarChar
  expires_at                                        DateTime  @db.Timestamp(6)
  accepted_at                                       DateTime? @db.Timestamp(6)
  created_at                                        DateTime  @default(now()) @db.Timestamp(6)
  users_store_invitations_invited_by_user_idTousers users     @relation("store_invitations_invited_by_user_idTousers", fields: [invited_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "store_invitations_invited_by_user_id_users_id_fk")
  users_store_invitations_store_owner_idTousers     users     @relation("store_invitations_store_owner_idTousers", fields: [store_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "store_invitations_store_owner_id_users_id_fk")
}

model subscriber_engagement {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  subscriber_id    String      @unique(map: "subscriber_engagement_subscriber_idx") @db.VarChar
  engagement_score Int?        @default(0)
  last_opened_at   DateTime?   @db.Timestamp(6)
  last_clicked_at  DateTime?   @db.Timestamp(6)
  total_opens      Int?        @default(0)
  total_clicks     Int?        @default(0)
  total_sent       Int?        @default(0)
  updated_at       DateTime?   @default(now()) @db.Timestamp(6)
  subscribers      subscribers @relation(fields: [subscriber_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriber_engagement_subscriber_id_subscribers_id_fk")

  @@index([engagement_score], map: "subscriber_engagement_score_idx")
}

model subscriber_group_memberships {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  subscriber_id     String            @db.VarChar
  group_id          String            @db.VarChar
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  subscriber_groups subscriber_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriber_group_memberships_group_id_subscriber_groups_id_fk")
  subscribers       subscribers       @relation(fields: [subscriber_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriber_group_memberships_subscriber_id_subscribers_id_fk")

  @@unique([subscriber_id, group_id], map: "subscriber_group_unique")
}

model subscriber_groups {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                      String                         @db.VarChar
  name                         String
  description                  String?
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  subscriber_group_memberships subscriber_group_memberships[]
}

model subscribers {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                      String                         @db.VarChar
  email                        String
  name                         String?
  status                       String                         @default("active")
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  automation_executions        automation_executions[]
  subscriber_engagement        subscriber_engagement?
  subscriber_group_memberships subscriber_group_memberships[]

  @@unique([user_id, email], map: "subscribers_user_email_unique")
}

model team_invitations {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email          String    @db.VarChar
  store_owner_id String    @db.VarChar
  capabilities   Json
  status         String    @default("pending") @db.VarChar
  token          String    @unique(map: "team_invitations_token_unique") @db.VarChar
  expires_at     DateTime  @db.Timestamp(6)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  accepted_at    DateTime? @db.Timestamp(6)
  users          users     @relation(fields: [store_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_invitations_store_owner_id_users_id_fk")
}

model tiktok_settings {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id         String    @unique(map: "tiktok_settings_user_id_unique") @db.VarChar
  access_token    String?
  refresh_token   String?
  advertiser_id   String?   @db.VarChar
  advertiser_name String?   @db.VarChar
  connected       Int?      @default(0)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
}

model trade_payment_schedules {
  id                       String               @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  quotation_id             String               @db.VarChar
  payment_type             trade_payment_type
  amount                   Decimal              @db.Decimal(10, 2)
  due_date                 DateTime?            @db.Timestamp(6)
  status                   trade_payment_status @default(pending)
  stripe_payment_intent_id String?              @db.VarChar
  paid_at                  DateTime?            @db.Timestamp(6)
  created_at               DateTime             @default(now()) @db.Timestamp(6)
  updated_at               DateTime             @default(now()) @db.Timestamp(6)

  @@unique([quotation_id, payment_type], map: "unique_quotation_payment_type")
  @@index([quotation_id], map: "trade_payment_schedules_quotation_idx")
  @@index([status])
}

model trade_quotation_events {
  id           String                     @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  quotation_id String                     @db.VarChar
  event_type   trade_quotation_event_type
  performed_by String                     @db.VarChar
  payload      Json?
  created_at   DateTime                   @default(now()) @db.Timestamp(6)

  @@index([quotation_id], map: "trade_quotation_events_quotation_idx")
}

model trade_quotation_items {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  quotation_id      String             @db.VarChar
  line_number       Int
  description       String
  product_id        String?            @db.VarChar
  unit_price        Decimal            @db.Decimal(10, 2)
  quantity          Int
  line_total        Decimal            @db.Decimal(10, 2)
  created_at        DateTime           @default(now()) @db.Timestamp(6)
  updated_at        DateTime           @default(now()) @db.Timestamp(6)
  
  // CRITICAL FIX: Cascade delete when quotation is deleted
  trade_quotations  trade_quotations   @relation(fields: [quotation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([quotation_id], map: "trade_quotation_items_quotation_idx")
}

model trade_quotations {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                String                    @db.VarChar
  buyer_email              String
  buyer_id                 String?                   @db.VarChar
  quotation_number         String                    @unique(map: "trade_quotations_quotation_number_idx") @db.VarChar
  currency                 String                    @default("USD") @db.VarChar(3)
  subtotal                 Decimal                   @db.Decimal(10, 2)
  tax_amount               Decimal                   @default(0) @db.Decimal(10, 2)
  shipping_amount          Decimal                   @default(0) @db.Decimal(10, 2)
  total                    Decimal                   @db.Decimal(10, 2)
  deposit_amount           Decimal                   @db.Decimal(10, 2)
  deposit_percentage       Int                       @default(50)
  balance_amount           Decimal                   @db.Decimal(10, 2)
  status                   trade_quotation_status    @default(draft)
  valid_until              DateTime?                 @db.Timestamp(6)
  metadata                 Json?
  created_at               DateTime                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime                  @default(now()) @db.Timestamp(6)
  order_id                 String?                   @db.VarChar
  delivery_terms           String?                   @db.VarChar(10)
  data_sheet_url           String?
  terms_and_conditions_url String?
  trade_quotation_items    trade_quotation_items[]

  @@index([buyer_email])
  @@index([seller_id], map: "trade_quotations_seller_idx")
  @@index([status])
  @@index([buyer_id])
  @@index([seller_id, status])
}

model trustpilot_reviews {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id            String    @db.VarChar
  trustpilot_review_id String    @unique(map: "trustpilot_reviews_trustpilot_review_id_unique") @db.VarChar
  stars                Int
  title                String?
  content              String
  reviewer_name        String
  reviewer_country     String?   @db.VarChar
  verified_buyer       Int?      @default(0)
  product_id           String?   @db.VarChar
  product_sku          String?   @db.VarChar
  review_date          DateTime  @db.Timestamp(6)
  language             String?   @default("en") @db.VarChar
  reply_text           String?
  reply_date           DateTime? @db.Timestamp(6)
  is_visible           Int?      @default(1)
  is_featured          Int?      @default(0)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)

  @@index([product_id])
  @@index([seller_id])
  @@index([stars])
}

model trustpilot_tokens {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id          String    @unique(map: "trustpilot_tokens_user_id_unique") @db.VarChar
  access_token     String
  refresh_token    String?
  token_type       String?   @default("Bearer") @db.VarChar
  expires_at       DateTime  @db.Timestamp(6)
  business_unit_id String    @db.VarChar
  business_name    String?
  auto_sync        Int?      @default(1)
  last_sync_at     DateTime? @db.Timestamp(6)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)

  @@index([user_id])
}

model user_store_memberships {
  id                                                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                                            String   @db.VarChar
  store_owner_id                                     String   @db.VarChar
  status                                             String   @default("active") @db.VarChar
  created_at                                         DateTime @default(now()) @db.Timestamp(6)
  updated_at                                         DateTime @default(now()) @db.Timestamp(6)
  access_level                                       String   @db.VarChar
  invited_by                                         String?  @db.VarChar
  users_user_store_memberships_invited_byTousers     users?   @relation("user_store_memberships_invited_byTousers", fields: [invited_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_store_memberships_invited_by_users_id_fk")
  users_user_store_memberships_store_owner_idTousers users    @relation("user_store_memberships_store_owner_idTousers", fields: [store_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_store_memberships_store_owner_id_users_id_fk")
  users_user_store_memberships_user_idTousers        users    @relation("user_store_memberships_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_store_memberships_user_id_users_id_fk")

  @@unique([user_id, store_owner_id], map: "unique_user_store_membership")
}

model user_store_roles {
  id                                           String             @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id                                      String             @db.VarChar
  store_owner_id                               String             @db.VarChar
  role                                         store_context_role
  created_at                                   DateTime?          @default(now()) @db.Timestamp(6)
  users_user_store_roles_store_owner_idTousers users              @relation("user_store_roles_store_owner_idTousers", fields: [store_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_store_roles_store_owner_id_users_id_fk")
  users_user_store_roles_user_idTousers        users              @relation("user_store_roles_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_store_roles_user_id_users_id_fk")

  @@unique([user_id, store_owner_id], map: "unique_user_store")
}

model users {
  id                                                                  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email                                                               String?                   @unique(map: "users_email_unique") @db.VarChar
  username                                                            String?                   @unique(map: "users_username_unique") @db.VarChar
  first_name                                                          String?                   @db.VarChar
  last_name                                                           String?                   @db.VarChar
  profile_image_url                                                   String?                   @db.VarChar
  password                                                            String?                   @db.VarChar
  role                                                                String                    @default("customer") @db.VarChar
  seller_id                                                           String?                   @db.VarChar
  invited_by                                                          String?                   @db.VarChar
  store_banner                                                        String?
  store_logo                                                          String?
  payment_provider                                                    String?                   @db.VarChar
  stripe_connected_account_id                                         String?                   @db.VarChar
  stripe_charges_enabled                                              Int?                      @default(0)
  stripe_payouts_enabled                                              Int?                      @default(0)
  stripe_details_submitted                                            Int?                      @default(0)
  listing_currency                                                    String?                   @default("USD") @db.VarChar(3)
  stripe_customer_id                                                  String?                   @db.VarChar
  stripe_subscription_id                                              String?                   @db.VarChar
  subscription_status                                                 String?                   @db.VarChar
  subscription_plan                                                   String?                   @db.VarChar
  trial_ends_at                                                       DateTime?                 @db.Timestamp(6)
  paypal_merchant_id                                                  String?                   @db.VarChar
  paypal_partner_id                                                   String?                   @db.VarChar
  custom_domain                                                       String?                   @db.VarChar
  custom_domain_verified                                              Int?                      @default(0)
  instagram_user_id                                                   String?                   @db.VarChar
  instagram_username                                                  String?                   @db.VarChar
  instagram_access_token                                              String?
  shipping_price                                                      Decimal?                  @default(0) @db.Decimal(10, 2)
  store_active                                                        Int?                      @default(1)
  shipping_policy                                                     String?
  returns_policy                                                      String?
  contact_email                                                       String?                   @db.VarChar
  created_at                                                          DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at                                                          DateTime?                 @default(now()) @db.Timestamp(6)
  tax_enabled                                                         Int?                      @default(0)
  tax_nexus_countries                                                 String[]
  tax_nexus_states                                                    String[]
  tax_product_code                                                    String?                   @db.VarChar
  is_platform_admin                                                   Int?                      @default(0)
  about_story                                                         String?
  social_instagram                                                    String?                   @db.VarChar
  social_twitter                                                      String?                   @db.VarChar
  social_tiktok                                                       String?                   @db.VarChar
  social_snapchat                                                     String?                   @db.VarChar
  social_website                                                      String?                   @db.VarChar
  welcome_email_sent                                                  Int?                      @default(0)
  user_type                                                           user_type?
  company_name                                                        String?                   @db.VarChar
  business_type                                                       String?                   @db.VarChar
  tax_id                                                              String?                   @db.VarChar
  terms_pdf_url                                                       String?                   @db.VarChar
  terms_source                                                        String?                   @default("platform_default") @db.VarChar
  warehouse_street                                                    String?                   @db.VarChar
  warehouse_city                                                      String?                   @db.VarChar
  warehouse_state                                                     String?                   @db.VarChar
  warehouse_postal_code                                               String?                   @db.VarChar
  warehouse_country                                                   String?                   @db.VarChar
  business_phone                                                      String?                   @db.VarChar
  warehouse_address_line1                                             String?                   @db.VarChar
  warehouse_address_line2                                             String?                   @db.VarChar
  warehouse_address_city                                              String?                   @db.VarChar
  warehouse_address_state                                             String?                   @db.VarChar
  warehouse_address_postal_code                                       String?                   @db.VarChar
  warehouse_address_country_code                                      String?                   @db.VarChar(2)
  warehouse_address_country_name                                      String?                   @db.VarChar
  warehouse_address_latitude                                          Float?                    @db.Real
  warehouse_address_longitude                                         Float?                    @db.Real
  warehouse_address_validated_source                                  String?                   @db.VarChar(20)
  warehouse_address_validated_at                                      DateTime?                 @db.Timestamp(6)
  shippo_address_object_id                                            String?                   @db.VarChar
  pending_label_credit_usd                                            Decimal?                  @default(0) @db.Decimal(10, 2)
  import_jobs                                                         import_jobs[]
  import_sources                                                      import_sources[]
  newsletter_segments                                                 newsletter_segments[]
  newsletter_workflows                                                newsletter_workflows[]
  store_invitations_store_invitations_invited_by_user_idTousers       store_invitations[]       @relation("store_invitations_invited_by_user_idTousers")
  store_invitations_store_invitations_store_owner_idTousers           store_invitations[]       @relation("store_invitations_store_owner_idTousers")
  team_invitations                                                    team_invitations[]
  user_store_memberships_user_store_memberships_invited_byTousers     user_store_memberships[]  @relation("user_store_memberships_invited_byTousers")
  user_store_memberships_user_store_memberships_store_owner_idTousers user_store_memberships[]  @relation("user_store_memberships_store_owner_idTousers")
  user_store_memberships_user_store_memberships_user_idTousers        user_store_memberships[]  @relation("user_store_memberships_user_idTousers")
  user_store_roles_user_store_roles_store_owner_idTousers             user_store_roles[]        @relation("user_store_roles_store_owner_idTousers")
  user_store_roles_user_store_roles_user_idTousers                    user_store_roles[]        @relation("user_store_roles_user_idTousers")
  wholesale_access_grants_wholesale_access_grants_buyer_idTousers     wholesale_access_grants[] @relation("wholesale_access_grants_buyer_idTousers")
  wholesale_access_grants_wholesale_access_grants_seller_idTousers    wholesale_access_grants[] @relation("wholesale_access_grants_seller_idTousers")
}

model warehouse_addresses {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                String    @db.VarChar
  name                     String
  address_line1            String    @db.VarChar
  address_line2            String?   @db.VarChar
  city                     String    @db.VarChar
  state                    String    @db.VarChar
  postal_code              String    @db.VarChar
  country_code             String    @db.VarChar(2)
  country_name             String    @db.VarChar
  phone                    String?   @db.VarChar
  latitude                 Float?    @db.Real
  longitude                Float?    @db.Real
  validated_source         String?   @db.VarChar(20)
  validated_at             DateTime? @db.Timestamp(6)
  shippo_address_object_id String?   @db.VarChar
  is_default               Int       @default(0)
  created_at               DateTime  @default(now()) @db.Timestamp(6)
  updated_at               DateTime  @default(now()) @db.Timestamp(6)

  @@index([is_default])
  @@index([seller_id])
}

model warehouse_locations {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id     String   @db.VarChar
  name          String
  address       Json
  contact_name  String?  @db.VarChar
  contact_phone String?  @db.VarChar
  contact_email String?  @db.VarChar
  is_default    Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)

  @@index([seller_id])
}

model webhook_events {
  id            String    @id @db.VarChar
  provider_name String    @db.VarChar
  event_type    String    @db.VarChar
  payload       Json
  processed_at  DateTime? @db.Timestamp(6)
  created_at    DateTime  @default(now()) @db.Timestamp(6)

  @@index([processed_at])
  @@index([provider_name, event_type], map: "webhook_events_provider_event_type_idx")
}

model wholesale_access_grants {
  id                                             String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  buyer_id                                       String    @db.VarChar
  seller_id                                      String    @db.VarChar
  status                                         String    @default("active") @db.VarChar
  wholesale_terms                                Json?
  created_at                                     DateTime  @default(now()) @db.Timestamp(6)
  revoked_at                                     DateTime? @db.Timestamp(6)
  users_wholesale_access_grants_buyer_idTousers  users     @relation("wholesale_access_grants_buyer_idTousers", fields: [buyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wholesale_access_grants_buyer_id_users_id_fk")
  users_wholesale_access_grants_seller_idTousers users     @relation("wholesale_access_grants_seller_idTousers", fields: [seller_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wholesale_access_grants_seller_id_users_id_fk")

  @@unique([buyer_id, seller_id], map: "unique_buyer_seller_grant")
}

model wholesale_carts {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  buyer_id   String    @unique(map: "wholesale_carts_buyer_id_unique") @db.VarChar
  seller_id  String    @db.VarChar
  items      Json
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  currency   String    @default("USD") @db.VarChar(3)
}

model wholesale_invitations {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id       String    @db.VarChar
  buyer_email     String
  buyer_name      String?
  status          String    @default("pending")
  token           String    @unique(map: "wholesale_invitations_token_unique") @db.VarChar
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  accepted_at     DateTime? @db.Timestamp(6)
  wholesale_terms Json?
  expires_at      DateTime? @db.Timestamp(6)
}

model wholesale_order_events {
  id                 String                     @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  wholesale_order_id String                     @db.VarChar
  event_type         wholesale_order_event_type
  payload            Json?
  description        String?
  performed_by       String?                    @db.VarChar
  occurred_at        DateTime                   @default(now()) @db.Timestamp(6)

  @@index([occurred_at])
  @@index([wholesale_order_id], map: "wholesale_order_events_order_id_idx")
}

model wholesale_order_items {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  wholesale_order_id    String   @db.VarChar
  product_id            String   @db.VarChar
  product_name          String
  product_image         String?
  product_sku           String?  @db.VarChar
  quantity              Int
  moq                   Int
  unit_price_cents      Int
  subtotal_cents        Int
  variant               Json?
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  refunded_quantity     Int?     @default(0)
  refunded_amount_cents Int?     @default(0)

  @@index([wholesale_order_id], map: "wholesale_order_items_order_id_idx")
  @@index([product_id])
}

model wholesale_orders {
  id                       String                 @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order_number             String                 @unique(map: "wholesale_orders_order_number_unique") @db.VarChar
  seller_id                String                 @db.VarChar
  buyer_id                 String                 @db.VarChar
  status                   wholesale_order_status @default(pending)
  subtotal_cents           Int
  tax_amount_cents         Int?                   @default(0)
  total_cents              Int
  currency                 String                 @default("USD") @db.VarChar(3)
  deposit_amount_cents     Int
  balance_amount_cents     Int
  deposit_percentage       Decimal?               @db.Decimal(5, 2)
  balance_percentage       Decimal?               @db.Decimal(5, 2)
  payment_terms            String?                @default("Net 30") @db.VarChar
  expected_ship_date       DateTime?              @db.Timestamp(6)
  balance_payment_due_date DateTime?              @db.Timestamp(6)
  order_deadline           DateTime?              @db.Timestamp(6)
  po_number                String?                @db.VarChar
  vat_number               String?                @db.VarChar
  incoterms                String?                @db.VarChar
  buyer_company_name       String?
  buyer_email              String
  buyer_name               String?
  created_at               DateTime               @default(now()) @db.Timestamp(6)
  updated_at               DateTime               @default(now()) @db.Timestamp(6)
  exchange_rate            Decimal?               @db.Decimal(10, 6)

  @@index([buyer_id])
  @@index([order_number])
  @@index([seller_id])
  @@index([status])
}

model wholesale_payment_intents {
  id                    String                          @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  orderId               String                          @db.VarChar
  type                  wholesale_payment_type
  stripePaymentIntentId String                          @unique(map: "wholesale_payment_intents_stripePaymentIntentId_unique") @db.VarChar
  amountCents           Int
  status                wholesale_payment_intent_status @default(pending)
  metadata              Json?
  createdAt             DateTime                        @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                        @default(now()) @db.Timestamp(6)

  @@index([orderId], map: "wholesale_payment_intents_order_id_idx")
  @@index([status])
  @@index([stripePaymentIntentId], map: "wholesale_payment_intents_stripe_id_idx")
}

model wholesale_payments {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  wholesale_order_id       String                   @db.VarChar
  payment_type             wholesale_payment_type
  status                   wholesale_payment_status @default(pending)
  amount_cents             Int
  currency                 String                   @default("USD") @db.VarChar(3)
  stripe_payment_intent_id String?                  @db.VarChar
  due_date                 DateTime?                @db.Timestamp(6)
  requested_at             DateTime?                @db.Timestamp(6)
  paid_at                  DateTime?                @db.Timestamp(6)
  email_sent_at            DateTime?                @db.Timestamp(6)
  last_reminder_at         DateTime?                @db.Timestamp(6)
  created_at               DateTime                 @default(now()) @db.Timestamp(6)
  updated_at               DateTime                 @default(now()) @db.Timestamp(6)
  exchange_rate            Decimal?                 @db.Decimal(10, 6)

  @@index([wholesale_order_id], map: "wholesale_payments_order_id_idx")
  @@index([payment_type])
  @@index([status])
}

model wholesale_products {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  seller_id                String    @db.VarChar
  product_id               String?   @db.VarChar
  name                     String
  description              String
  image                    String
  images                   String[]
  category                 String
  rrp                      Decimal   @db.Decimal(10, 2)
  wholesale_price          Decimal   @db.Decimal(10, 2)
  moq                      Int
  deposit_amount           Decimal?  @db.Decimal(10, 2)
  requires_deposit         Int?      @default(0)
  stock                    Int?      @default(0)
  readiness_days           Int?
  variants                 Json?
  created_at               DateTime  @default(now()) @db.Timestamp(6)
  updated_at               DateTime  @default(now()) @db.Timestamp(6)
  deposit_percentage       Decimal?  @db.Decimal(5, 2)
  balance_percentage       Decimal?  @db.Decimal(5, 2)
  expected_ship_date       DateTime? @db.Timestamp(6)
  balance_payment_date     DateTime? @db.Timestamp(6)
  order_deadline           DateTime? @db.Timestamp(6)
  ship_from_address        Json?
  contact_details          Json?
  suggested_retail_price   Decimal?  @db.Decimal(10, 2)
  payment_terms            String?   @default("Net 30") @db.VarChar
  sku                      String?   @db.VarChar(100)
  readiness_type           String?   @db.VarChar(20)
  readiness_value          String?   @db.VarChar(50)
  balance_payment_terms    String?   @db.VarChar(50)
  terms_and_conditions_url String?
  category_level_1_id      String?   @db.VarChar
  category_level_2_id      String?   @db.VarChar
  category_level_3_id      String?   @db.VarChar
  status                   String?   @default("draft")
}

model wholesale_shipping_details {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  wholesale_order_id     String                  @unique(map: "wholesale_shipping_details_wholesale_order_id_unique") @db.VarChar
  shipping_type          wholesale_shipping_type
  carrier_name           String?                 @db.VarChar
  carrier_account_number String?                 @db.VarChar
  prepaid_label_urls     String[]
  service_level          String?                 @db.VarChar
  pickup_address         Json?
  pickup_contact_name    String?                 @db.VarChar
  pickup_contact_phone   String?                 @db.VarChar
  pickup_contact_email   String?                 @db.VarChar
  invoicing_address      Json?
  invoicing_name         String?                 @db.VarChar
  invoicing_email        String?                 @db.VarChar
  invoicing_phone        String?                 @db.VarChar
  remember_invoicing     Int?                    @default(0)
  created_at             DateTime                @default(now()) @db.Timestamp(6)
  updated_at             DateTime                @default(now()) @db.Timestamp(6)

  @@index([wholesale_order_id], map: "wholesale_shipping_details_order_id_idx")
}

model wholesale_shipping_metadata {
  id                 String                  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  orderId            String                  @unique(map: "wholesale_shipping_metadata_orderId_unique") @db.VarChar
  shippingType       wholesale_shipping_type
  freightAccount     String?                 @db.VarChar
  carrier            String?                 @db.VarChar
  trackingNumber     String?                 @db.VarChar
  pickupAddress      Json?
  pickupInstructions String?
  createdAt          DateTime                @default(now()) @db.Timestamp(6)
  updatedAt          DateTime                @default(now()) @db.Timestamp(6)

  @@index([orderId], map: "wholesale_shipping_metadata_order_id_idx")
}

model x_settings {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user_id             String    @unique(map: "x_settings_user_id_unique") @db.VarChar
  access_token        String?
  access_token_secret String?
  account_id          String?   @db.VarChar
  account_name        String?   @db.VarChar
  connected           Int?      @default(0)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
}

enum background_job_status {
  pending
  running
  completed
  failed
  retrying
}

enum balance_request_status {
  pending
  requested
  paid
  failed
  cancelled
}

enum bulk_upload_item_status {
  pending
  valid
  warning
  error
  imported
  failed
}

enum bulk_upload_status {
  pending
  preprocessed
  validating
  validated
  importing
  completed
  completed_with_errors
  failed
  rolled_back
}

enum CartStatus {
  active
  converted
  expired
}

enum domain_status {
  pending_verification
  dns_verified
  ssl_provisioning
  active
  error
  deactivated
}

enum domain_strategy {
  cloudflare
  manual
}

enum meta_ad_account_status {
  pending_oauth
  connected
  token_expired
  disconnected
  suspended
}

enum meta_budget_status {
  active
  low
  depleted
  suspended
}

enum meta_campaign_objective {
  OUTCOME_TRAFFIC
  OUTCOME_ENGAGEMENT
  OUTCOME_LEADS
  OUTCOME_SALES
}

enum meta_campaign_status {
  draft
  pending_payment
  active
  paused
  completed
  cancelled
  failed
}

enum meta_transaction_type {
  credit_purchase
  ad_spend
  upfirst_fee
  refund
  adjustment
}

enum order_balance_payment_status {
  pending
  requested
  paid
  failed
  cancelled
}

enum order_event_type {
  status_change
  email_sent
  payment_received
  refund_processed
  tracking_updated
  balance_payment_requested
  balance_payment_received
  document_generated
}

enum OrderStatus {
  pending
  processing
  fulfilled
  cancelled
  refunded
  paid
  awaiting_payment
  awaiting_balance
  balance_overdue
  deposit_paid
  in_production
  ready_to_ship
}

enum refund_line_item_type {
  product
  shipping
  tax
  adjustment
}

enum ProductStatus {
  draft
  active
  archived
}

enum seller_credit_ledger_source {
  label_refund
  label_purchase
  manual
  settlement_fix
}

enum seller_credit_ledger_type {
  debit
  credit
  adjustment
}

enum shipping_label_refund_status {
  queued
  pending
  success
  rejected
}

enum shipping_label_status {
  pending
  purchased
  void_requested
  voided
  failed
}

enum store_context_role {
  buyer
  seller
  owner
}

enum trade_payment_status {
  pending
  paid
  overdue
  cancelled
}

enum trade_payment_type {
  deposit
  balance
}

enum trade_quotation_event_type {
  created
  sent
  viewed
  accepted
  deposit_paid
  balance_paid
  expired
  cancelled
  email_sent
}

enum trade_quotation_status {
  draft
  sent
  viewed
  accepted
  deposit_paid
  balance_due
  fully_paid
  completed
  cancelled
  expired
}

enum user_type {
  seller
  buyer
}

enum wholesale_order_event_type {
  order_created
  status_change
  deposit_payment_received
  balance_payment_requested
  balance_payment_received
  balance_payment_overdue
  email_sent
  tracking_updated
  order_fulfilled
  order_cancelled
}

enum wholesale_order_status {
  pending
  deposit_paid
  awaiting_balance
  balance_overdue
  ready_to_release
  in_production
  fulfilled
  cancelled
}

enum wholesale_payment_intent_status {
  pending
  succeeded
  failed
  canceled
}

enum wholesale_payment_status {
  pending
  requested
  paid
  failed
  cancelled
  overdue
}

enum wholesale_payment_type {
  deposit
  balance
}

enum wholesale_shipping_type {
  freight_collect
  buyer_pickup
}

enum workflow_event_type {
  WORKFLOW_STARTED
  STATE_TRANSITION
  STEP_COMPLETED
  STEP_FAILED
  COMPENSATION_TRIGGERED
  RETRY_ATTEMPTED
  WORKFLOW_COMPLETED
  WORKFLOW_FAILED
}

enum workflow_state {
  INIT
  CART_VALIDATED
  SELLER_VERIFIED
  SHIPPING_PRICED
  PRICING_COMPUTED
  INVENTORY_RESERVED
  PAYMENT_INTENT_CREATED
  ORDER_CREATED
  AWAITING_PAYMENT_CONFIRMATION
  PAYMENT_CONFIRMED
  INVENTORY_COMMITTED
  NOTIFICATIONS_SENT
  COMPLETED
  FAILURE
  CANCELLED
}
