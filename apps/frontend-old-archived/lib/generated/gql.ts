/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          image\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": typeof types.AddToCartDocument,
    "\n  mutation UpdateCartItem($cartId: ID!, $input: UpdateCartItemInput!) {\n    updateCartItem(cartId: $cartId, input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": typeof types.UpdateCartItemDocument,
    "\n  mutation RemoveFromCart($cartId: ID!, $productId: ID!, $variantId: ID) {\n    removeFromCart(cartId: $cartId, productId: $productId, variantId: $variantId) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": typeof types.RemoveFromCartDocument,
    "\n  mutation ClearCart($cartId: ID!) {\n    clearCart(cartId: $cartId)\n  }\n": typeof types.ClearCartDocument,
    "\n  mutation UpdateFulfillment($input: UpdateOrderFulfillmentInput!) {\n    updateFulfillment(input: $input) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      trackingNumber\n      carrier\n    }\n  }\n": typeof types.UpdateFulfillmentDocument,
    "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      id\n      orderNumber\n      status\n      totalAmount\n    }\n  }\n": typeof types.CreateOrderDocument,
    "\n  mutation CancelOrder($orderId: ID!) {\n    cancelOrder(orderId: $orderId) {\n      id\n      orderNumber\n      status\n    }\n  }\n": typeof types.CancelOrderDocument,
    "\n  mutation ReorderItems($orderId: ID!) {\n    reorderItems(orderId: $orderId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n    }\n  }\n": typeof types.ReorderItemsDocument,
    "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id)\n  }\n": typeof types.DeleteProductDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n": typeof types.CreateProductDocument,
    "\n  mutation UpdateProduct($id: ID!, $input: UpdateProductInput!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n": typeof types.UpdateProductDocument,
    "\n  mutation CreateWholesaleInvitation($input: CreateWholesaleInvitationInput!) {\n    createWholesaleInvitation(input: $input) {\n      id\n      buyerEmail\n      token\n    }\n  }\n": typeof types.CreateWholesaleInvitationDocument,
    "\n  mutation CancelInvitation($invitationId: ID!) {\n    cancelInvitation(invitationId: $invitationId) {\n      id\n      status\n    }\n  }\n": typeof types.CancelInvitationDocument,
    "\n  query GetCart {\n    cart: getCartBySession(sessionId: \"\") {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          images\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": typeof types.GetCartDocument,
    "\n  query ListOrders($filter: OrderFilterInput, $sort: OrderSortInput, $first: Int, $after: String) {\n    listOrders(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          orderNumber\n          status\n          fulfillmentStatus\n          paymentStatus\n          totalAmount\n          currency\n          customerName\n          customerEmail\n          createdAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ListOrdersDocument,
    "\n  query GetOrder($id: ID!) {\n    getOrder(id: $id) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      paymentStatus\n      subtotal\n      shippingCost\n      taxAmount\n      totalAmount\n      currency\n      customerName\n      customerEmail\n      customerPhone\n      shippingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      billingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      paidAt\n      buyer {\n        id\n        email\n        fullName\n      }\n      items {\n        id\n        productId\n        productName\n        productImage\n        quantity\n        unitPrice\n        lineTotal\n        fulfillmentStatus\n        variantId\n        product {\n          id\n          name\n          images\n        }\n      }\n    }\n  }\n": typeof types.GetOrderDocument,
    "\n  query ListProducts($first: Int, $after: String, $filter: ProductFilterInput) {\n    listProducts(first: $first, after: $after, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          description\n          price\n          category\n          productType\n          image\n          stock\n          status\n          createdAt\n          presentation {\n            availabilityText\n            badges\n            stockLevelIndicator\n            availableForPurchase\n            isPreOrder\n            isMadeToOrder\n            stockQuantity\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ListProductsDocument,
    "\n  query GetProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      images\n      stock\n      status\n      createdAt\n      presentation {\n        availabilityText\n        badges\n        stockLevelIndicator\n        availableForPurchase\n        isPreOrder\n        isMadeToOrder\n        stockQuantity\n      }\n    }\n  }\n": typeof types.GetProductDocument,
    "\n  query GetCurrentUser {\n    getCurrentUser {\n      id\n      email\n      username\n      fullName\n      userType\n    }\n  }\n": typeof types.GetCurrentUserDocument,
    "\n  query ListWholesaleInvitations {\n    listWholesaleInvitations {\n      edges {\n        node {\n          id\n          buyerEmail\n          status\n          createdAt\n          acceptedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n    }\n  }\n": typeof types.ListWholesaleInvitationsDocument,
    "\n  query GetSellerByUsername($username: String!) {\n    getSellerByUsername(username: $username) {\n      id\n      username\n      email\n      fullName\n      sellerAccount {\n        id\n        businessName\n        storeName\n        storeSlug\n      }\n    }\n  }\n": typeof types.GetSellerByUsernameDocument,
    "\n  query ListWholesaleBuyers {\n    listWholesaleBuyers {\n      edges {\n        node {\n          id\n          buyerId\n          sellerId\n          isActive\n          grantedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n": typeof types.ListWholesaleBuyersDocument,
    "\n  fragment QuotationFields on Quotation {\n    id\n    quotationNumber\n    sellerId\n    buyerEmail\n    buyerId\n    status\n    subtotal\n    taxAmount\n    shippingAmount\n    total\n    currency\n    depositAmount\n    depositPercentage\n    balanceAmount\n    validUntil\n    deliveryTerms\n    paymentTerms\n    dataSheetUrl\n    termsAndConditionsUrl\n    orderId\n    metadata\n    createdAt\n    updatedAt\n  }\n": typeof types.QuotationFieldsFragmentDoc,
    "\n  fragment LineItemFields on QuotationLineItem {\n    id\n    quotationId\n    lineNumber\n    description\n    productId\n    unitPrice\n    quantity\n    lineTotal\n    createdAt\n    updatedAt\n  }\n": typeof types.LineItemFieldsFragmentDoc,
    "\n  \n  \n  query GetQuotation($id: ID!) {\n    getQuotation(id: $id) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n      }\n      buyer {\n        id\n        email\n      }\n    }\n  }\n": typeof types.GetQuotationDocument,
    "\n  \n  query ListQuotations {\n    listQuotations {\n      edges {\n        node {\n          ...QuotationFields\n          seller {\n            id\n            username\n          }\n          buyer {\n            id\n            email\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ListQuotationsDocument,
    "\n  \n  mutation CreateQuotation($input: CreateQuotationInput!) {\n    createQuotation(input: $input) {\n      ...QuotationFields\n    }\n  }\n": typeof types.CreateQuotationDocument,
    "\n  \n  mutation UpdateQuotation($id: ID!, $input: UpdateQuotationInput!) {\n    updateQuotation(id: $id, input: $input) {\n      ...QuotationFields\n    }\n  }\n": typeof types.UpdateQuotationDocument,
    "\n  \n  mutation AcceptQuotation($id: ID!) {\n    acceptQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n": typeof types.AcceptQuotationDocument,
    "\n  \n  mutation SendQuotation($id: ID!) {\n    sendQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n": typeof types.SendQuotationDocument,
    "\n  \n  \n  query GetQuotationByToken($token: String!) {\n    getQuotationByToken(token: $token) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": typeof types.GetQuotationByTokenDocument,
    "\n  query CalculateQuotationTotals($input: CalculateQuotationTotalsInput!) {\n    calculateQuotationTotals(input: $input) {\n      lineItems {\n        description\n        unitPrice\n        quantity\n        lineTotal\n      }\n      subtotal\n      taxAmount\n      shippingAmount\n      total\n      depositAmount\n      depositPercentage\n      balanceAmount\n    }\n  }\n": typeof types.CalculateQuotationTotalsDocument,
    "\n  query GetWholesaleInvitation($token: String!) {\n    getWholesaleInvitation(token: $token) {\n      id\n      sellerId\n      buyerEmail\n      buyerId\n      status\n      token\n      expiresAt\n      acceptedAt\n      createdAt\n      seller {\n        id\n        fullName\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": typeof types.GetWholesaleInvitationDocument,
    "\n  mutation AcceptInvitation($token: String!) {\n    acceptInvitation(token: $token) {\n      id\n      sellerId\n      buyerId\n      isActive\n      grantedAt\n    }\n  }\n": typeof types.AcceptInvitationDocument,
    "\n  query ListWholesaleProducts(\n    $filter: ProductFilterInput\n    $sort: ProductSortInput\n    $first: Int\n    $after: String\n  ) {\n    listProducts(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          price\n          image\n          images\n          category\n          sku\n          stock\n          status\n          productType\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ListWholesaleProductsDocument,
    "\n  query GetWholesaleProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      image\n      images\n      category\n      sku\n      stock\n      status\n      productType\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": typeof types.GetWholesaleProductDocument,
    "\n  query ListWholesaleOrders($first: Int, $after: String) {\n    listWholesaleOrders(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          orderNumber\n          sellerId\n          buyerId\n          status\n          paymentStatus\n          subtotal\n          taxAmount\n          totalAmount\n          currency\n          depositAmount\n          depositPercentage\n          balanceDue\n          paymentTerms\n          poNumber\n          balanceRequestedAt\n          balancePaidAt\n          createdAt\n          updatedAt\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ListWholesaleOrdersDocument,
    "\n  query GetWholesaleOrder($id: ID!) {\n    getWholesaleOrder(id: $id) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      paymentStatus\n      subtotal\n      taxAmount\n      totalAmount\n      currency\n      depositAmount\n      depositPercentage\n      balanceDue\n      paymentTerms\n      poNumber\n      vatNumber\n      incoterms\n      balanceRequestedAt\n      balancePaidAt\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n      buyer {\n        id\n        fullName\n        email\n      }\n      items {\n        id\n        productId\n        productName\n        productSku\n        quantity\n        unitPrice\n        lineTotal\n        discountPercentage\n      }\n      calculatedDepositAmount\n      calculatedBalanceAmount\n    }\n  }\n": typeof types.GetWholesaleOrderDocument,
    "\n  mutation PlaceWholesaleOrder($input: PlaceWholesaleOrderInput!) {\n    placeWholesaleOrder(input: $input) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      totalAmount\n      depositAmount\n      balanceDue\n      paymentTerms\n      createdAt\n    }\n  }\n": typeof types.PlaceWholesaleOrderDocument,
    "\n  query GetWholesaleCart {\n    getWholesaleCart {\n      id\n      sellerId\n      buyerId\n      items {\n        id\n        productId\n        productName\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          image\n          stock\n        }\n      }\n      subtotal\n      itemCount\n      updatedAt\n    }\n  }\n": typeof types.GetWholesaleCartDocument,
    "\n  mutation UpdateWholesaleCartItem($input: UpdateWholesaleCartItemInput!) {\n    updateWholesaleCartItem(input: $input) {\n      id\n      items {\n        id\n        productId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      subtotal\n      itemCount\n    }\n  }\n": typeof types.UpdateWholesaleCartItemDocument,
    "\n  mutation RemoveFromWholesaleCart($itemId: ID!) {\n    removeFromWholesaleCart(itemId: $itemId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n      subtotal\n      itemCount\n    }\n  }\n": typeof types.RemoveFromWholesaleCartDocument,
};
const documents: Documents = {
    "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          image\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": types.AddToCartDocument,
    "\n  mutation UpdateCartItem($cartId: ID!, $input: UpdateCartItemInput!) {\n    updateCartItem(cartId: $cartId, input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": types.UpdateCartItemDocument,
    "\n  mutation RemoveFromCart($cartId: ID!, $productId: ID!, $variantId: ID) {\n    removeFromCart(cartId: $cartId, productId: $productId, variantId: $variantId) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": types.RemoveFromCartDocument,
    "\n  mutation ClearCart($cartId: ID!) {\n    clearCart(cartId: $cartId)\n  }\n": types.ClearCartDocument,
    "\n  mutation UpdateFulfillment($input: UpdateOrderFulfillmentInput!) {\n    updateFulfillment(input: $input) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      trackingNumber\n      carrier\n    }\n  }\n": types.UpdateFulfillmentDocument,
    "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      id\n      orderNumber\n      status\n      totalAmount\n    }\n  }\n": types.CreateOrderDocument,
    "\n  mutation CancelOrder($orderId: ID!) {\n    cancelOrder(orderId: $orderId) {\n      id\n      orderNumber\n      status\n    }\n  }\n": types.CancelOrderDocument,
    "\n  mutation ReorderItems($orderId: ID!) {\n    reorderItems(orderId: $orderId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n    }\n  }\n": types.ReorderItemsDocument,
    "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id)\n  }\n": types.DeleteProductDocument,
    "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n": types.CreateProductDocument,
    "\n  mutation UpdateProduct($id: ID!, $input: UpdateProductInput!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n": types.UpdateProductDocument,
    "\n  mutation CreateWholesaleInvitation($input: CreateWholesaleInvitationInput!) {\n    createWholesaleInvitation(input: $input) {\n      id\n      buyerEmail\n      token\n    }\n  }\n": types.CreateWholesaleInvitationDocument,
    "\n  mutation CancelInvitation($invitationId: ID!) {\n    cancelInvitation(invitationId: $invitationId) {\n      id\n      status\n    }\n  }\n": types.CancelInvitationDocument,
    "\n  query GetCart {\n    cart: getCartBySession(sessionId: \"\") {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          images\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n": types.GetCartDocument,
    "\n  query ListOrders($filter: OrderFilterInput, $sort: OrderSortInput, $first: Int, $after: String) {\n    listOrders(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          orderNumber\n          status\n          fulfillmentStatus\n          paymentStatus\n          totalAmount\n          currency\n          customerName\n          customerEmail\n          createdAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ListOrdersDocument,
    "\n  query GetOrder($id: ID!) {\n    getOrder(id: $id) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      paymentStatus\n      subtotal\n      shippingCost\n      taxAmount\n      totalAmount\n      currency\n      customerName\n      customerEmail\n      customerPhone\n      shippingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      billingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      paidAt\n      buyer {\n        id\n        email\n        fullName\n      }\n      items {\n        id\n        productId\n        productName\n        productImage\n        quantity\n        unitPrice\n        lineTotal\n        fulfillmentStatus\n        variantId\n        product {\n          id\n          name\n          images\n        }\n      }\n    }\n  }\n": types.GetOrderDocument,
    "\n  query ListProducts($first: Int, $after: String, $filter: ProductFilterInput) {\n    listProducts(first: $first, after: $after, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          description\n          price\n          category\n          productType\n          image\n          stock\n          status\n          createdAt\n          presentation {\n            availabilityText\n            badges\n            stockLevelIndicator\n            availableForPurchase\n            isPreOrder\n            isMadeToOrder\n            stockQuantity\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ListProductsDocument,
    "\n  query GetProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      images\n      stock\n      status\n      createdAt\n      presentation {\n        availabilityText\n        badges\n        stockLevelIndicator\n        availableForPurchase\n        isPreOrder\n        isMadeToOrder\n        stockQuantity\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query GetCurrentUser {\n    getCurrentUser {\n      id\n      email\n      username\n      fullName\n      userType\n    }\n  }\n": types.GetCurrentUserDocument,
    "\n  query ListWholesaleInvitations {\n    listWholesaleInvitations {\n      edges {\n        node {\n          id\n          buyerEmail\n          status\n          createdAt\n          acceptedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n    }\n  }\n": types.ListWholesaleInvitationsDocument,
    "\n  query GetSellerByUsername($username: String!) {\n    getSellerByUsername(username: $username) {\n      id\n      username\n      email\n      fullName\n      sellerAccount {\n        id\n        businessName\n        storeName\n        storeSlug\n      }\n    }\n  }\n": types.GetSellerByUsernameDocument,
    "\n  query ListWholesaleBuyers {\n    listWholesaleBuyers {\n      edges {\n        node {\n          id\n          buyerId\n          sellerId\n          isActive\n          grantedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n": types.ListWholesaleBuyersDocument,
    "\n  fragment QuotationFields on Quotation {\n    id\n    quotationNumber\n    sellerId\n    buyerEmail\n    buyerId\n    status\n    subtotal\n    taxAmount\n    shippingAmount\n    total\n    currency\n    depositAmount\n    depositPercentage\n    balanceAmount\n    validUntil\n    deliveryTerms\n    paymentTerms\n    dataSheetUrl\n    termsAndConditionsUrl\n    orderId\n    metadata\n    createdAt\n    updatedAt\n  }\n": types.QuotationFieldsFragmentDoc,
    "\n  fragment LineItemFields on QuotationLineItem {\n    id\n    quotationId\n    lineNumber\n    description\n    productId\n    unitPrice\n    quantity\n    lineTotal\n    createdAt\n    updatedAt\n  }\n": types.LineItemFieldsFragmentDoc,
    "\n  \n  \n  query GetQuotation($id: ID!) {\n    getQuotation(id: $id) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n      }\n      buyer {\n        id\n        email\n      }\n    }\n  }\n": types.GetQuotationDocument,
    "\n  \n  query ListQuotations {\n    listQuotations {\n      edges {\n        node {\n          ...QuotationFields\n          seller {\n            id\n            username\n          }\n          buyer {\n            id\n            email\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ListQuotationsDocument,
    "\n  \n  mutation CreateQuotation($input: CreateQuotationInput!) {\n    createQuotation(input: $input) {\n      ...QuotationFields\n    }\n  }\n": types.CreateQuotationDocument,
    "\n  \n  mutation UpdateQuotation($id: ID!, $input: UpdateQuotationInput!) {\n    updateQuotation(id: $id, input: $input) {\n      ...QuotationFields\n    }\n  }\n": types.UpdateQuotationDocument,
    "\n  \n  mutation AcceptQuotation($id: ID!) {\n    acceptQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n": types.AcceptQuotationDocument,
    "\n  \n  mutation SendQuotation($id: ID!) {\n    sendQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n": types.SendQuotationDocument,
    "\n  \n  \n  query GetQuotationByToken($token: String!) {\n    getQuotationByToken(token: $token) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": types.GetQuotationByTokenDocument,
    "\n  query CalculateQuotationTotals($input: CalculateQuotationTotalsInput!) {\n    calculateQuotationTotals(input: $input) {\n      lineItems {\n        description\n        unitPrice\n        quantity\n        lineTotal\n      }\n      subtotal\n      taxAmount\n      shippingAmount\n      total\n      depositAmount\n      depositPercentage\n      balanceAmount\n    }\n  }\n": types.CalculateQuotationTotalsDocument,
    "\n  query GetWholesaleInvitation($token: String!) {\n    getWholesaleInvitation(token: $token) {\n      id\n      sellerId\n      buyerEmail\n      buyerId\n      status\n      token\n      expiresAt\n      acceptedAt\n      createdAt\n      seller {\n        id\n        fullName\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": types.GetWholesaleInvitationDocument,
    "\n  mutation AcceptInvitation($token: String!) {\n    acceptInvitation(token: $token) {\n      id\n      sellerId\n      buyerId\n      isActive\n      grantedAt\n    }\n  }\n": types.AcceptInvitationDocument,
    "\n  query ListWholesaleProducts(\n    $filter: ProductFilterInput\n    $sort: ProductSortInput\n    $first: Int\n    $after: String\n  ) {\n    listProducts(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          price\n          image\n          images\n          category\n          sku\n          stock\n          status\n          productType\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ListWholesaleProductsDocument,
    "\n  query GetWholesaleProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      image\n      images\n      category\n      sku\n      stock\n      status\n      productType\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n": types.GetWholesaleProductDocument,
    "\n  query ListWholesaleOrders($first: Int, $after: String) {\n    listWholesaleOrders(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          orderNumber\n          sellerId\n          buyerId\n          status\n          paymentStatus\n          subtotal\n          taxAmount\n          totalAmount\n          currency\n          depositAmount\n          depositPercentage\n          balanceDue\n          paymentTerms\n          poNumber\n          balanceRequestedAt\n          balancePaidAt\n          createdAt\n          updatedAt\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ListWholesaleOrdersDocument,
    "\n  query GetWholesaleOrder($id: ID!) {\n    getWholesaleOrder(id: $id) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      paymentStatus\n      subtotal\n      taxAmount\n      totalAmount\n      currency\n      depositAmount\n      depositPercentage\n      balanceDue\n      paymentTerms\n      poNumber\n      vatNumber\n      incoterms\n      balanceRequestedAt\n      balancePaidAt\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n      buyer {\n        id\n        fullName\n        email\n      }\n      items {\n        id\n        productId\n        productName\n        productSku\n        quantity\n        unitPrice\n        lineTotal\n        discountPercentage\n      }\n      calculatedDepositAmount\n      calculatedBalanceAmount\n    }\n  }\n": types.GetWholesaleOrderDocument,
    "\n  mutation PlaceWholesaleOrder($input: PlaceWholesaleOrderInput!) {\n    placeWholesaleOrder(input: $input) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      totalAmount\n      depositAmount\n      balanceDue\n      paymentTerms\n      createdAt\n    }\n  }\n": types.PlaceWholesaleOrderDocument,
    "\n  query GetWholesaleCart {\n    getWholesaleCart {\n      id\n      sellerId\n      buyerId\n      items {\n        id\n        productId\n        productName\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          image\n          stock\n        }\n      }\n      subtotal\n      itemCount\n      updatedAt\n    }\n  }\n": types.GetWholesaleCartDocument,
    "\n  mutation UpdateWholesaleCartItem($input: UpdateWholesaleCartItemInput!) {\n    updateWholesaleCartItem(input: $input) {\n      id\n      items {\n        id\n        productId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      subtotal\n      itemCount\n    }\n  }\n": types.UpdateWholesaleCartItemDocument,
    "\n  mutation RemoveFromWholesaleCart($itemId: ID!) {\n    removeFromWholesaleCart(itemId: $itemId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n      subtotal\n      itemCount\n    }\n  }\n": types.RemoveFromWholesaleCartDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          image\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddToCart($input: AddToCartInput!) {\n    addToCart(input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          image\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCartItem($cartId: ID!, $input: UpdateCartItemInput!) {\n    updateCartItem(cartId: $cartId, input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCartItem($cartId: ID!, $input: UpdateCartItemInput!) {\n    updateCartItem(cartId: $cartId, input: $input) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromCart($cartId: ID!, $productId: ID!, $variantId: ID) {\n    removeFromCart(cartId: $cartId, productId: $productId, variantId: $variantId) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFromCart($cartId: ID!, $productId: ID!, $variantId: ID) {\n    removeFromCart(cartId: $cartId, productId: $productId, variantId: $variantId) {\n      id\n      items {\n        productId\n        variantId\n        quantity\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ClearCart($cartId: ID!) {\n    clearCart(cartId: $cartId)\n  }\n"): (typeof documents)["\n  mutation ClearCart($cartId: ID!) {\n    clearCart(cartId: $cartId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateFulfillment($input: UpdateOrderFulfillmentInput!) {\n    updateFulfillment(input: $input) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      trackingNumber\n      carrier\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateFulfillment($input: UpdateOrderFulfillmentInput!) {\n    updateFulfillment(input: $input) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      trackingNumber\n      carrier\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      id\n      orderNumber\n      status\n      totalAmount\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      id\n      orderNumber\n      status\n      totalAmount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CancelOrder($orderId: ID!) {\n    cancelOrder(orderId: $orderId) {\n      id\n      orderNumber\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CancelOrder($orderId: ID!) {\n    cancelOrder(orderId: $orderId) {\n      id\n      orderNumber\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReorderItems($orderId: ID!) {\n    reorderItems(orderId: $orderId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ReorderItems($orderId: ID!) {\n    reorderItems(orderId: $orderId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteProduct($id: ID!) {\n    deleteProduct(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProduct($input: CreateProductInput!) {\n    createProduct(input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateProduct($id: ID!, $input: UpdateProductInput!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProduct($id: ID!, $input: UpdateProductInput!) {\n    updateProduct(id: $id, input: $input) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      stock\n      inventoryStatus\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWholesaleInvitation($input: CreateWholesaleInvitationInput!) {\n    createWholesaleInvitation(input: $input) {\n      id\n      buyerEmail\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWholesaleInvitation($input: CreateWholesaleInvitationInput!) {\n    createWholesaleInvitation(input: $input) {\n      id\n      buyerEmail\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CancelInvitation($invitationId: ID!) {\n    cancelInvitation(invitationId: $invitationId) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CancelInvitation($invitationId: ID!) {\n    cancelInvitation(invitationId: $invitationId) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCart {\n    cart: getCartBySession(sessionId: \"\") {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          images\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCart {\n    cart: getCartBySession(sessionId: \"\") {\n      id\n      items {\n        productId\n        variantId\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          images\n        }\n      }\n      totals {\n        subtotal\n        tax\n        total\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListOrders($filter: OrderFilterInput, $sort: OrderSortInput, $first: Int, $after: String) {\n    listOrders(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          orderNumber\n          status\n          fulfillmentStatus\n          paymentStatus\n          totalAmount\n          currency\n          customerName\n          customerEmail\n          createdAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ListOrders($filter: OrderFilterInput, $sort: OrderSortInput, $first: Int, $after: String) {\n    listOrders(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          orderNumber\n          status\n          fulfillmentStatus\n          paymentStatus\n          totalAmount\n          currency\n          customerName\n          customerEmail\n          createdAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrder($id: ID!) {\n    getOrder(id: $id) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      paymentStatus\n      subtotal\n      shippingCost\n      taxAmount\n      totalAmount\n      currency\n      customerName\n      customerEmail\n      customerPhone\n      shippingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      billingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      paidAt\n      buyer {\n        id\n        email\n        fullName\n      }\n      items {\n        id\n        productId\n        productName\n        productImage\n        quantity\n        unitPrice\n        lineTotal\n        fulfillmentStatus\n        variantId\n        product {\n          id\n          name\n          images\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrder($id: ID!) {\n    getOrder(id: $id) {\n      id\n      orderNumber\n      status\n      fulfillmentStatus\n      paymentStatus\n      subtotal\n      shippingCost\n      taxAmount\n      totalAmount\n      currency\n      customerName\n      customerEmail\n      customerPhone\n      shippingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      billingAddress {\n        fullName\n        addressLine1\n        addressLine2\n        city\n        state\n        postalCode\n        country\n        phone\n      }\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      paidAt\n      buyer {\n        id\n        email\n        fullName\n      }\n      items {\n        id\n        productId\n        productName\n        productImage\n        quantity\n        unitPrice\n        lineTotal\n        fulfillmentStatus\n        variantId\n        product {\n          id\n          name\n          images\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListProducts($first: Int, $after: String, $filter: ProductFilterInput) {\n    listProducts(first: $first, after: $after, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          description\n          price\n          category\n          productType\n          image\n          stock\n          status\n          createdAt\n          presentation {\n            availabilityText\n            badges\n            stockLevelIndicator\n            availableForPurchase\n            isPreOrder\n            isMadeToOrder\n            stockQuantity\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ListProducts($first: Int, $after: String, $filter: ProductFilterInput) {\n    listProducts(first: $first, after: $after, filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          description\n          price\n          category\n          productType\n          image\n          stock\n          status\n          createdAt\n          presentation {\n            availabilityText\n            badges\n            stockLevelIndicator\n            availableForPurchase\n            isPreOrder\n            isMadeToOrder\n            stockQuantity\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      images\n      stock\n      status\n      createdAt\n      presentation {\n        availabilityText\n        badges\n        stockLevelIndicator\n        availableForPurchase\n        isPreOrder\n        isMadeToOrder\n        stockQuantity\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      category\n      productType\n      image\n      images\n      stock\n      status\n      createdAt\n      presentation {\n        availabilityText\n        badges\n        stockLevelIndicator\n        availableForPurchase\n        isPreOrder\n        isMadeToOrder\n        stockQuantity\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCurrentUser {\n    getCurrentUser {\n      id\n      email\n      username\n      fullName\n      userType\n    }\n  }\n"): (typeof documents)["\n  query GetCurrentUser {\n    getCurrentUser {\n      id\n      email\n      username\n      fullName\n      userType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListWholesaleInvitations {\n    listWholesaleInvitations {\n      edges {\n        node {\n          id\n          buyerEmail\n          status\n          createdAt\n          acceptedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListWholesaleInvitations {\n    listWholesaleInvitations {\n      edges {\n        node {\n          id\n          buyerEmail\n          status\n          createdAt\n          acceptedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSellerByUsername($username: String!) {\n    getSellerByUsername(username: $username) {\n      id\n      username\n      email\n      fullName\n      sellerAccount {\n        id\n        businessName\n        storeName\n        storeSlug\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSellerByUsername($username: String!) {\n    getSellerByUsername(username: $username) {\n      id\n      username\n      email\n      fullName\n      sellerAccount {\n        id\n        businessName\n        storeName\n        storeSlug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListWholesaleBuyers {\n    listWholesaleBuyers {\n      edges {\n        node {\n          id\n          buyerId\n          sellerId\n          isActive\n          grantedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ListWholesaleBuyers {\n    listWholesaleBuyers {\n      edges {\n        node {\n          id\n          buyerId\n          sellerId\n          isActive\n          grantedAt\n          buyer {\n            id\n            email\n            fullName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuotationFields on Quotation {\n    id\n    quotationNumber\n    sellerId\n    buyerEmail\n    buyerId\n    status\n    subtotal\n    taxAmount\n    shippingAmount\n    total\n    currency\n    depositAmount\n    depositPercentage\n    balanceAmount\n    validUntil\n    deliveryTerms\n    paymentTerms\n    dataSheetUrl\n    termsAndConditionsUrl\n    orderId\n    metadata\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment QuotationFields on Quotation {\n    id\n    quotationNumber\n    sellerId\n    buyerEmail\n    buyerId\n    status\n    subtotal\n    taxAmount\n    shippingAmount\n    total\n    currency\n    depositAmount\n    depositPercentage\n    balanceAmount\n    validUntil\n    deliveryTerms\n    paymentTerms\n    dataSheetUrl\n    termsAndConditionsUrl\n    orderId\n    metadata\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LineItemFields on QuotationLineItem {\n    id\n    quotationId\n    lineNumber\n    description\n    productId\n    unitPrice\n    quantity\n    lineTotal\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment LineItemFields on QuotationLineItem {\n    id\n    quotationId\n    lineNumber\n    description\n    productId\n    unitPrice\n    quantity\n    lineTotal\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  \n  query GetQuotation($id: ID!) {\n    getQuotation(id: $id) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n      }\n      buyer {\n        id\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query GetQuotation($id: ID!) {\n    getQuotation(id: $id) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n      }\n      buyer {\n        id\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  query ListQuotations {\n    listQuotations {\n      edges {\n        node {\n          ...QuotationFields\n          seller {\n            id\n            username\n          }\n          buyer {\n            id\n            email\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  \n  query ListQuotations {\n    listQuotations {\n      edges {\n        node {\n          ...QuotationFields\n          seller {\n            id\n            username\n          }\n          buyer {\n            id\n            email\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  mutation CreateQuotation($input: CreateQuotationInput!) {\n    createQuotation(input: $input) {\n      ...QuotationFields\n    }\n  }\n"): (typeof documents)["\n  \n  mutation CreateQuotation($input: CreateQuotationInput!) {\n    createQuotation(input: $input) {\n      ...QuotationFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  mutation UpdateQuotation($id: ID!, $input: UpdateQuotationInput!) {\n    updateQuotation(id: $id, input: $input) {\n      ...QuotationFields\n    }\n  }\n"): (typeof documents)["\n  \n  mutation UpdateQuotation($id: ID!, $input: UpdateQuotationInput!) {\n    updateQuotation(id: $id, input: $input) {\n      ...QuotationFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  mutation AcceptQuotation($id: ID!) {\n    acceptQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n"): (typeof documents)["\n  \n  mutation AcceptQuotation($id: ID!) {\n    acceptQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  mutation SendQuotation($id: ID!) {\n    sendQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n"): (typeof documents)["\n  \n  mutation SendQuotation($id: ID!) {\n    sendQuotation(id: $id) {\n      ...QuotationFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  \n  query GetQuotationByToken($token: String!) {\n    getQuotationByToken(token: $token) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query GetQuotationByToken($token: String!) {\n    getQuotationByToken(token: $token) {\n      ...QuotationFields\n      items {\n        ...LineItemFields\n      }\n      seller {\n        id\n        username\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CalculateQuotationTotals($input: CalculateQuotationTotalsInput!) {\n    calculateQuotationTotals(input: $input) {\n      lineItems {\n        description\n        unitPrice\n        quantity\n        lineTotal\n      }\n      subtotal\n      taxAmount\n      shippingAmount\n      total\n      depositAmount\n      depositPercentage\n      balanceAmount\n    }\n  }\n"): (typeof documents)["\n  query CalculateQuotationTotals($input: CalculateQuotationTotalsInput!) {\n    calculateQuotationTotals(input: $input) {\n      lineItems {\n        description\n        unitPrice\n        quantity\n        lineTotal\n      }\n      subtotal\n      taxAmount\n      shippingAmount\n      total\n      depositAmount\n      depositPercentage\n      balanceAmount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWholesaleInvitation($token: String!) {\n    getWholesaleInvitation(token: $token) {\n      id\n      sellerId\n      buyerEmail\n      buyerId\n      status\n      token\n      expiresAt\n      acceptedAt\n      createdAt\n      seller {\n        id\n        fullName\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetWholesaleInvitation($token: String!) {\n    getWholesaleInvitation(token: $token) {\n      id\n      sellerId\n      buyerEmail\n      buyerId\n      status\n      token\n      expiresAt\n      acceptedAt\n      createdAt\n      seller {\n        id\n        fullName\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AcceptInvitation($token: String!) {\n    acceptInvitation(token: $token) {\n      id\n      sellerId\n      buyerId\n      isActive\n      grantedAt\n    }\n  }\n"): (typeof documents)["\n  mutation AcceptInvitation($token: String!) {\n    acceptInvitation(token: $token) {\n      id\n      sellerId\n      buyerId\n      isActive\n      grantedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListWholesaleProducts(\n    $filter: ProductFilterInput\n    $sort: ProductSortInput\n    $first: Int\n    $after: String\n  ) {\n    listProducts(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          price\n          image\n          images\n          category\n          sku\n          stock\n          status\n          productType\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ListWholesaleProducts(\n    $filter: ProductFilterInput\n    $sort: ProductSortInput\n    $first: Int\n    $after: String\n  ) {\n    listProducts(filter: $filter, sort: $sort, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          description\n          price\n          image\n          images\n          category\n          sku\n          stock\n          status\n          productType\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWholesaleProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      image\n      images\n      category\n      sku\n      stock\n      status\n      productType\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetWholesaleProduct($id: ID!) {\n    getProduct(id: $id) {\n      id\n      name\n      description\n      price\n      image\n      images\n      category\n      sku\n      stock\n      status\n      productType\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ListWholesaleOrders($first: Int, $after: String) {\n    listWholesaleOrders(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          orderNumber\n          sellerId\n          buyerId\n          status\n          paymentStatus\n          subtotal\n          taxAmount\n          totalAmount\n          currency\n          depositAmount\n          depositPercentage\n          balanceDue\n          paymentTerms\n          poNumber\n          balanceRequestedAt\n          balancePaidAt\n          createdAt\n          updatedAt\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ListWholesaleOrders($first: Int, $after: String) {\n    listWholesaleOrders(first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          orderNumber\n          sellerId\n          buyerId\n          status\n          paymentStatus\n          subtotal\n          taxAmount\n          totalAmount\n          currency\n          depositAmount\n          depositPercentage\n          balanceDue\n          paymentTerms\n          poNumber\n          balanceRequestedAt\n          balancePaidAt\n          createdAt\n          updatedAt\n          seller {\n            id\n            sellerAccount {\n              businessName\n              storeName\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWholesaleOrder($id: ID!) {\n    getWholesaleOrder(id: $id) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      paymentStatus\n      subtotal\n      taxAmount\n      totalAmount\n      currency\n      depositAmount\n      depositPercentage\n      balanceDue\n      paymentTerms\n      poNumber\n      vatNumber\n      incoterms\n      balanceRequestedAt\n      balancePaidAt\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n      buyer {\n        id\n        fullName\n        email\n      }\n      items {\n        id\n        productId\n        productName\n        productSku\n        quantity\n        unitPrice\n        lineTotal\n        discountPercentage\n      }\n      calculatedDepositAmount\n      calculatedBalanceAmount\n    }\n  }\n"): (typeof documents)["\n  query GetWholesaleOrder($id: ID!) {\n    getWholesaleOrder(id: $id) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      paymentStatus\n      subtotal\n      taxAmount\n      totalAmount\n      currency\n      depositAmount\n      depositPercentage\n      balanceDue\n      paymentTerms\n      poNumber\n      vatNumber\n      incoterms\n      balanceRequestedAt\n      balancePaidAt\n      trackingNumber\n      carrier\n      createdAt\n      updatedAt\n      seller {\n        id\n        email\n        sellerAccount {\n          businessName\n          storeName\n        }\n      }\n      buyer {\n        id\n        fullName\n        email\n      }\n      items {\n        id\n        productId\n        productName\n        productSku\n        quantity\n        unitPrice\n        lineTotal\n        discountPercentage\n      }\n      calculatedDepositAmount\n      calculatedBalanceAmount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PlaceWholesaleOrder($input: PlaceWholesaleOrderInput!) {\n    placeWholesaleOrder(input: $input) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      totalAmount\n      depositAmount\n      balanceDue\n      paymentTerms\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation PlaceWholesaleOrder($input: PlaceWholesaleOrderInput!) {\n    placeWholesaleOrder(input: $input) {\n      id\n      orderNumber\n      sellerId\n      buyerId\n      status\n      totalAmount\n      depositAmount\n      balanceDue\n      paymentTerms\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetWholesaleCart {\n    getWholesaleCart {\n      id\n      sellerId\n      buyerId\n      items {\n        id\n        productId\n        productName\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          image\n          stock\n        }\n      }\n      subtotal\n      itemCount\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetWholesaleCart {\n    getWholesaleCart {\n      id\n      sellerId\n      buyerId\n      items {\n        id\n        productId\n        productName\n        quantity\n        unitPrice\n        lineTotal\n        product {\n          id\n          name\n          price\n          image\n          stock\n        }\n      }\n      subtotal\n      itemCount\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWholesaleCartItem($input: UpdateWholesaleCartItemInput!) {\n    updateWholesaleCartItem(input: $input) {\n      id\n      items {\n        id\n        productId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      subtotal\n      itemCount\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWholesaleCartItem($input: UpdateWholesaleCartItemInput!) {\n    updateWholesaleCartItem(input: $input) {\n      id\n      items {\n        id\n        productId\n        quantity\n        unitPrice\n        lineTotal\n      }\n      subtotal\n      itemCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromWholesaleCart($itemId: ID!) {\n    removeFromWholesaleCart(itemId: $itemId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n      subtotal\n      itemCount\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveFromWholesaleCart($itemId: ID!) {\n    removeFromWholesaleCart(itemId: $itemId) {\n      id\n      items {\n        id\n        productId\n        quantity\n      }\n      subtotal\n      itemCount\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;