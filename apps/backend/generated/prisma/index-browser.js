
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Analytics_eventsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_email: 'user_email',
  event_type: 'event_type',
  event_category: 'event_category',
  event_data: 'event_data',
  created_at: 'created_at'
};

exports.Prisma.Auth_tokensScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  code: 'code',
  token_type: 'token_type',
  expires_at: 'expires_at',
  used: 'used',
  seller_context: 'seller_context',
  created_at: 'created_at',
  return_url: 'return_url',
  login_context: 'login_context'
};

exports.Prisma.Automation_executionsScalarFieldEnum = {
  id: 'id',
  workflow_id: 'workflow_id',
  subscriber_id: 'subscriber_id',
  subscriber_email: 'subscriber_email',
  trigger_data: 'trigger_data',
  status: 'status',
  actions_taken: 'actions_taken',
  error: 'error',
  executed_at: 'executed_at'
};

exports.Prisma.Background_job_runsScalarFieldEnum = {
  id: 'id',
  job_name: 'job_name',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at',
  duration: 'duration',
  records_processed: 'records_processed',
  records_failed: 'records_failed',
  error_message: 'error_message',
  error_stack: 'error_stack',
  retry_count: 'retry_count',
  next_retry_at: 'next_retry_at',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Balance_requestsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  created_by: 'created_by',
  status: 'status',
  session_token_hash: 'session_token_hash',
  expires_at: 'expires_at',
  pricing_snapshot: 'pricing_snapshot',
  shipping_snapshot: 'shipping_snapshot',
  payment_intent_id: 'payment_intent_id',
  balance_due_cents: 'balance_due_cents',
  currency: 'currency',
  email_sent_at: 'email_sent_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bulk_upload_itemsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  row_number: 'row_number',
  row_data: 'row_data',
  validation_status: 'validation_status',
  validation_messages: 'validation_messages',
  product_id: 'product_id',
  created_at: 'created_at'
};

exports.Prisma.Bulk_upload_jobsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  file_name: 'file_name',
  status: 'status',
  total_rows: 'total_rows',
  success_count: 'success_count',
  error_count: 'error_count',
  warning_count: 'warning_count',
  mappings: 'mappings',
  error_message: 'error_message',
  processed_rows: 'processed_rows',
  created_at: 'created_at',
  completed_at: 'completed_at'
};

exports.Prisma.Buyer_profilesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  company_name: 'company_name',
  vat_number: 'vat_number',
  billing_address: 'billing_address',
  shipping_address: 'shipping_address',
  default_payment_terms: 'default_payment_terms',
  credit_limit: 'credit_limit',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Cancellation_requestsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  buyer_email: 'buyer_email',
  buyer_name: 'buyer_name',
  reason: 'reason',
  status: 'status',
  seller_id: 'seller_id',
  reviewed_by: 'reviewed_by',
  reviewed_at: 'reviewed_at',
  rejection_reason: 'rejection_reason',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Cart_itemsScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  quantity: 'quantity'
};

exports.Prisma.Cart_sessionsScalarFieldEnum = {
  session_id: 'session_id',
  cart_id: 'cart_id',
  last_seen: 'last_seen'
};

exports.Prisma.CartsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  buyer_id: 'buyer_id',
  items: 'items',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parent_id: 'parent_id',
  level: 'level',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Daily_analyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  new_signups: 'new_signups',
  new_sellers: 'new_sellers',
  new_buyers: 'new_buyers',
  products_listed: 'products_listed',
  orders_placed: 'orders_placed',
  revenue: 'revenue',
  active_users: 'active_users',
  created_at: 'created_at'
};

exports.Prisma.Domain_connectionsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  domain: 'domain',
  normalized_domain: 'normalized_domain',
  strategy: 'strategy',
  status: 'status',
  verification_token: 'verification_token',
  dns_instructions: 'dns_instructions',
  cloudflare_custom_hostname_id: 'cloudflare_custom_hostname_id',
  caddy_site_id: 'caddy_site_id',
  ssl_status: 'ssl_status',
  ssl_provider: 'ssl_provider',
  ssl_renew_at: 'ssl_renew_at',
  ssl_issued_at: 'ssl_issued_at',
  ssl_expires_at: 'ssl_expires_at',
  last_checked_at: 'last_checked_at',
  last_verified_at: 'last_verified_at',
  failure_reason: 'failure_reason',
  failure_code: 'failure_code',
  retry_count: 'retry_count',
  is_primary: 'is_primary',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Failed_webhook_eventsScalarFieldEnum = {
  id: 'id',
  event_id: 'event_id',
  provider_name: 'provider_name',
  payload: 'payload',
  error_message: 'error_message',
  retry_count: 'retry_count',
  last_retry_at: 'last_retry_at',
  created_at: 'created_at',
  event_type: 'event_type'
};

exports.Prisma.Feature_adoptionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  feature_key: 'feature_key',
  feature_name: 'feature_name',
  status: 'status',
  adopted_at: 'adopted_at',
  dismissed_at: 'dismissed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Homepage_cta_optionsScalarFieldEnum = {
  id: 'id',
  label: 'label',
  variant: 'variant',
  icon: 'icon',
  description: 'description',
  url_path: 'url_path',
  is_active: 'is_active',
  sort_order: 'sort_order',
  created_at: 'created_at'
};

exports.Prisma.Homepage_media_assetsScalarFieldEnum = {
  id: 'id',
  homepage_id: 'homepage_id',
  type: 'type',
  object_key: 'object_key',
  url: 'url',
  alt_text: 'alt_text',
  focal_point: 'focal_point',
  duration: 'duration',
  is_hero: 'is_hero',
  sort_order: 'sort_order',
  created_at: 'created_at'
};

exports.Prisma.Import_job_errorsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  external_id: 'external_id',
  stage: 'stage',
  error_code: 'error_code',
  error_message: 'error_message',
  retry_count: 'retry_count',
  resolved: 'resolved',
  created_at: 'created_at'
};

exports.Prisma.Import_job_logsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  level: 'level',
  message: 'message',
  details_json: 'details_json',
  created_at: 'created_at'
};

exports.Prisma.Import_jobsScalarFieldEnum = {
  id: 'id',
  source_id: 'source_id',
  type: 'type',
  status: 'status',
  total_items: 'total_items',
  processed_items: 'processed_items',
  error_count: 'error_count',
  last_checkpoint: 'last_checkpoint',
  started_at: 'started_at',
  finished_at: 'finished_at',
  created_by: 'created_by',
  created_at: 'created_at'
};

exports.Prisma.Import_sourcesScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  platform: 'platform',
  auth_type: 'auth_type',
  credentials_json: 'credentials_json',
  status: 'status',
  metadata: 'metadata',
  auto_publish: 'auto_publish',
  last_sync_at: 'last_sync_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InvitationsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  invited_by: 'invited_by',
  status: 'status',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  seller_id: 'seller_id',
  invoice_number: 'invoice_number',
  document_url: 'document_url',
  document_type: 'document_type',
  order_type: 'order_type',
  currency: 'currency',
  total_amount: 'total_amount',
  tax_amount: 'tax_amount',
  po_number: 'po_number',
  vat_number: 'vat_number',
  incoterms: 'incoterms',
  payment_terms: 'payment_terms',
  generated_by: 'generated_by',
  generation_trigger: 'generation_trigger',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Meta_ad_accountsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  meta_user_id: 'meta_user_id',
  meta_ad_account_id: 'meta_ad_account_id',
  access_token: 'access_token',
  token_expires_at: 'token_expires_at',
  status: 'status',
  business_name: 'business_name',
  currency: 'currency',
  timezone: 'timezone',
  total_spent: 'total_spent',
  total_revenue: 'total_revenue',
  last_synced_at: 'last_synced_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_selected: 'is_selected'
};

exports.Prisma.Meta_ad_campaignsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  meta_campaign_id: 'meta_campaign_id',
  campaign_name: 'campaign_name',
  objective: 'objective',
  status: 'status',
  product_ids: 'product_ids',
  ad_copy: 'ad_copy',
  headline: 'headline',
  call_to_action: 'call_to_action',
  target_countries: 'target_countries',
  target_languages: 'target_languages',
  target_age_min: 'target_age_min',
  target_age_max: 'target_age_max',
  target_gender: 'target_gender',
  advantage_plus_enabled: 'advantage_plus_enabled',
  advantage_audience: 'advantage_audience',
  advantage_placements: 'advantage_placements',
  daily_budget: 'daily_budget',
  total_budget: 'total_budget',
  start_date: 'start_date',
  end_date: 'end_date',
  amount_charged: 'amount_charged',
  meta_spend: 'meta_spend',
  platform_fee: 'platform_fee',
  remaining_budget: 'remaining_budget',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  impressions: 'impressions',
  clicks: 'clicks',
  conversions: 'conversions',
  reach: 'reach',
  ctr: 'ctr',
  cpc: 'cpc',
  error_message: 'error_message',
  last_sync_at: 'last_sync_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Meta_ad_paymentsScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  seller_id: 'seller_id',
  amount: 'amount',
  meta_spend: 'meta_spend',
  platform_fee: 'platform_fee',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  payment_status: 'payment_status',
  payment_type: 'payment_type',
  refund_amount: 'refund_amount',
  refund_reason: 'refund_reason',
  created_at: 'created_at'
};

exports.Prisma.Meta_ad_performanceScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  meta_campaign_id: 'meta_campaign_id',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  conversions: 'conversions',
  reach: 'reach',
  spend: 'spend',
  ctr: 'ctr',
  cpc: 'cpc',
  cpm: 'cpm',
  conversion_rate: 'conversion_rate',
  created_at: 'created_at'
};

exports.Prisma.Meta_campaign_financeScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  campaign_id: 'campaign_id',
  transaction_type: 'transaction_type',
  amount: 'amount',
  currency: 'currency',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  meta_transaction_id: 'meta_transaction_id',
  upfirst_fee_amount: 'upfirst_fee_amount',
  description: 'description',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Meta_campaign_metrics_dailyScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  reach: 'reach',
  frequency: 'frequency',
  likes: 'likes',
  comments: 'comments',
  shares: 'shares',
  saves: 'saves',
  link_clicks: 'link_clicks',
  website_visits: 'website_visits',
  purchases: 'purchases',
  revenue: 'revenue',
  spend: 'spend',
  cpm: 'cpm',
  cpc: 'cpc',
  ctr: 'ctr',
  roas: 'roas',
  created_at: 'created_at'
};

exports.Prisma.Meta_campaignsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  ad_account_id: 'ad_account_id',
  product_id: 'product_id',
  name: 'name',
  status: 'status',
  objective: 'objective',
  meta_campaign_id: 'meta_campaign_id',
  meta_ad_set_id: 'meta_ad_set_id',
  meta_ad_id: 'meta_ad_id',
  primary_text: 'primary_text',
  headline: 'headline',
  description: 'description',
  call_to_action: 'call_to_action',
  targeting: 'targeting',
  daily_budget: 'daily_budget',
  lifetime_budget: 'lifetime_budget',
  start_date: 'start_date',
  end_date: 'end_date',
  use_advantage_plus: 'use_advantage_plus',
  advantage_plus_config: 'advantage_plus_config',
  alert_email: 'alert_email',
  low_budget_threshold: 'low_budget_threshold',
  activated_at: 'activated_at',
  paused_at: 'paused_at',
  completed_at: 'completed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Meta_settingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  ad_account_id: 'ad_account_id',
  account_name: 'account_name',
  connected: 'connected',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Music_tracksScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  provider_track_id: 'provider_track_id',
  title: 'title',
  artist: 'artist',
  duration: 'duration',
  preview_url: 'preview_url',
  stream_url: 'stream_url',
  download_url: 'download_url',
  genre: 'genre',
  mood: 'mood',
  tags: 'tags',
  waveform: 'waveform',
  license_tier: 'license_tier',
  license_url: 'license_url',
  is_active: 'is_active',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_ab_testsScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  variant_a_subject: 'variant_a_subject',
  variant_a_content: 'variant_a_content',
  variant_b_subject: 'variant_b_subject',
  variant_b_content: 'variant_b_content',
  split_percentage: 'split_percentage',
  winner_metric: 'winner_metric',
  status: 'status',
  winner_id: 'winner_id',
  variant_a_sent: 'variant_a_sent',
  variant_a_opened: 'variant_a_opened',
  variant_a_clicked: 'variant_a_clicked',
  variant_b_sent: 'variant_b_sent',
  variant_b_opened: 'variant_b_opened',
  variant_b_clicked: 'variant_b_clicked',
  created_at: 'created_at',
  completed_at: 'completed_at'
};

exports.Prisma.Newsletter_analyticsScalarFieldEnum = {
  id: 'id',
  newsletter_id: 'newsletter_id',
  user_id: 'user_id',
  total_sent: 'total_sent',
  total_delivered: 'total_delivered',
  total_opened: 'total_opened',
  total_clicked: 'total_clicked',
  total_bounced: 'total_bounced',
  total_unsubscribed: 'total_unsubscribed',
  open_rate: 'open_rate',
  click_rate: 'click_rate',
  bounce_rate: 'bounce_rate',
  last_updated: 'last_updated',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_conversionsScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  subscriber_email: 'subscriber_email',
  conversion_type: 'conversion_type',
  conversion_value: 'conversion_value',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_eventsScalarFieldEnum = {
  id: 'id',
  newsletter_id: 'newsletter_id',
  recipient_email: 'recipient_email',
  event_type: 'event_type',
  event_data: 'event_data',
  webhook_event_id: 'webhook_event_id',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_jobsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  priority: 'priority',
  scheduled_for: 'scheduled_for',
  max_retries: 'max_retries',
  retry_count: 'retry_count',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at',
  error: 'error',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_scheduleScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  scheduled_at: 'scheduled_at',
  timezone: 'timezone',
  recurrence: 'recurrence',
  status: 'status',
  locked_at: 'locked_at',
  locked_by: 'locked_by',
  sent_at: 'sent_at',
  error: 'error',
  created_at: 'created_at'
};

exports.Prisma.Newsletter_segmentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  subscriber_count: 'subscriber_count',
  last_evaluated_at: 'last_evaluated_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Newsletter_templatesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  subject: 'subject',
  content: 'content',
  html_content: 'html_content',
  images: 'images',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Newsletter_workflowsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  type: 'type',
  trigger: 'trigger',
  actions: 'actions',
  status: 'status',
  execution_count: 'execution_count',
  last_executed_at: 'last_executed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NewslettersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  subject: 'subject',
  content: 'content',
  html_content: 'html_content',
  recipients: 'recipients',
  group_ids: 'group_ids',
  images: 'images',
  status: 'status',
  sent_at: 'sent_at',
  resend_batch_id: 'resend_batch_id',
  created_at: 'created_at',
  preheader: 'preheader',
  from_name: 'from_name',
  segment_ids: 'segment_ids'
};

exports.Prisma.Nft_mintsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_id: 'user_id',
  mint_address: 'mint_address',
  transaction_signature: 'transaction_signature',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  title: 'title',
  message: 'message',
  email_sent: 'email_sent',
  email_id: 'email_id',
  read: 'read',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Order_address_changesScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  balance_request_id: 'balance_request_id',
  changed_by: 'changed_by',
  previous_address: 'previous_address',
  new_address: 'new_address',
  previous_shipping_cost_cents: 'previous_shipping_cost_cents',
  new_shipping_cost_cents: 'new_shipping_cost_cents',
  reason: 'reason',
  created_at: 'created_at'
};

exports.Prisma.Order_balance_paymentsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  amount_due: 'amount_due',
  amount_paid: 'amount_paid',
  currency: 'currency',
  status: 'status',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  requested_at: 'requested_at',
  paid_at: 'paid_at',
  email_sent_at: 'email_sent_at',
  last_reminder_at: 'last_reminder_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Order_eventsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  event_type: 'event_type',
  payload: 'payload',
  description: 'description',
  performed_by: 'performed_by',
  occurred_at: 'occurred_at'
};

exports.Prisma.Order_itemsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  product_id: 'product_id',
  product_name: 'product_name',
  product_image: 'product_image',
  product_type: 'product_type',
  quantity: 'quantity',
  price: 'price',
  subtotal: 'subtotal',
  deposit_amount: 'deposit_amount',
  requires_deposit: 'requires_deposit',
  variant: 'variant',
  item_status: 'item_status',
  tracking_number: 'tracking_number',
  tracking_carrier: 'tracking_carrier',
  tracking_url: 'tracking_url',
  tracking_link: 'tracking_link',
  shipped_at: 'shipped_at',
  delivered_at: 'delivered_at',
  refunded_quantity: 'refunded_quantity',
  refunded_amount: 'refunded_amount',
  returned_at: 'returned_at',
  refunded_at: 'refunded_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  balance_amount: 'balance_amount',
  original_price: 'original_price',
  discount_percentage: 'discount_percentage',
  discount_amount: 'discount_amount',
  product_sku: 'product_sku',
  variant_sku: 'variant_sku',
  pre_order_date: 'pre_order_date',
  made_to_order_lead_time: 'made_to_order_lead_time',
  delivery_reminder_sent_at: 'delivery_reminder_sent_at'
};

exports.Prisma.Order_workflow_eventsScalarFieldEnum = {
  id: 'id',
  workflow_id: 'workflow_id',
  event_type: 'event_type',
  from_state: 'from_state',
  to_state: 'to_state',
  payload: 'payload',
  error: 'error',
  occurred_at: 'occurred_at'
};

exports.Prisma.Order_workflowsScalarFieldEnum = {
  id: 'id',
  checkout_session_id: 'checkout_session_id',
  order_id: 'order_id',
  payment_intent_id: 'payment_intent_id',
  status: 'status',
  current_state: 'current_state',
  data: 'data',
  error: 'error',
  error_code: 'error_code',
  retry_count: 'retry_count',
  last_retry_at: 'last_retry_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  customer_name: 'customer_name',
  customer_email: 'customer_email',
  customer_address: 'customer_address',
  items: 'items',
  total: 'total',
  amount_paid: 'amount_paid',
  remaining_balance: 'remaining_balance',
  payment_type: 'payment_type',
  payment_status: 'payment_status',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  stripe_balance_payment_intent_id: 'stripe_balance_payment_intent_id',
  status: 'status',
  fulfillment_status: 'fulfillment_status',
  tracking_number: 'tracking_number',
  tracking_link: 'tracking_link',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tax_amount: 'tax_amount',
  tax_calculation_id: 'tax_calculation_id',
  tax_breakdown: 'tax_breakdown',
  subtotal_before_tax: 'subtotal_before_tax',
  currency: 'currency',
  shipping_cost: 'shipping_cost',
  shipping_method: 'shipping_method',
  shipping_zone: 'shipping_zone',
  shipping_carrier: 'shipping_carrier',
  shipping_estimated_days: 'shipping_estimated_days',
  shipping_street: 'shipping_street',
  shipping_city: 'shipping_city',
  shipping_state: 'shipping_state',
  shipping_postal_code: 'shipping_postal_code',
  shipping_country: 'shipping_country',
  deposit_amount_cents: 'deposit_amount_cents',
  balance_due_cents: 'balance_due_cents',
  balance_paid_at: 'balance_paid_at',
  shipping_locked: 'shipping_locked',
  pricing_version: 'pricing_version',
  seller_id: 'seller_id',
  billing_name: 'billing_name',
  billing_email: 'billing_email',
  billing_phone: 'billing_phone',
  billing_street: 'billing_street',
  billing_city: 'billing_city',
  billing_state: 'billing_state',
  billing_postal_code: 'billing_postal_code',
  billing_country: 'billing_country',
  shipping_label_id: 'shipping_label_id'
};

exports.Prisma.Packing_slipsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  seller_id: 'seller_id',
  packing_slip_number: 'packing_slip_number',
  document_url: 'document_url',
  document_type: 'document_type',
  warehouse_notes: 'warehouse_notes',
  gift_message: 'gift_message',
  includes_pricing: 'includes_pricing',
  generated_by: 'generated_by',
  generation_trigger: 'generation_trigger',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Payment_intentsScalarFieldEnum = {
  id: 'id',
  provider_name: 'provider_name',
  provider_intent_id: 'provider_intent_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  client_secret: 'client_secret',
  metadata: 'metadata',
  idempotency_key: 'idempotency_key',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Product_source_mappingsScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  source_id: 'source_id',
  external_product_id: 'external_product_id',
  external_variant_id: 'external_variant_id',
  external_handle: 'external_handle',
  last_synced_at: 'last_synced_at',
  sync_state: 'sync_state',
  checksum: 'checksum',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  name: 'name',
  description: 'description',
  price: 'price',
  image: 'image',
  images: 'images',
  category: 'category',
  category_level_1_id: 'category_level_1_id',
  category_level_2_id: 'category_level_2_id',
  category_level_3_id: 'category_level_3_id',
  product_type: 'product_type',
  stock: 'stock',
  deposit_amount: 'deposit_amount',
  requires_deposit: 'requires_deposit',
  variants: 'variants',
  made_to_order_days: 'made_to_order_days',
  pre_order_date: 'pre_order_date',
  discount_percentage: 'discount_percentage',
  promotion_active: 'promotion_active',
  promotion_end_date: 'promotion_end_date',
  shipping_type: 'shipping_type',
  flat_shipping_rate: 'flat_shipping_rate',
  shipping_matrix_id: 'shipping_matrix_id',
  shippo_weight: 'shippo_weight',
  shippo_length: 'shippo_length',
  shippo_width: 'shippo_width',
  shippo_height: 'shippo_height',
  shippo_template: 'shippo_template',
  status: 'status',
  has_colors: 'has_colors',
  sku: 'sku',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Refund_line_itemsScalarFieldEnum = {
  id: 'id',
  refund_id: 'refund_id',
  order_item_id: 'order_item_id',
  type: 'type',
  quantity: 'quantity',
  amount: 'amount',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.RefundsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  total_amount: 'total_amount',
  reason: 'reason',
  stripe_refund_id: 'stripe_refund_id',
  status: 'status',
  processed_by: 'processed_by',
  created_at: 'created_at',
  wholesale_order_id: 'wholesale_order_id',
  wholesale_payment_id: 'wholesale_payment_id',
  currency: 'currency'
};

exports.Prisma.Return_requestsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  order_item_id: 'order_item_id',
  buyer_email: 'buyer_email',
  buyer_name: 'buyer_name',
  reason: 'reason',
  status: 'status',
  seller_id: 'seller_id',
  reviewed_by: 'reviewed_by',
  reviewed_at: 'reviewed_at',
  rejection_reason: 'rejection_reason',
  return_method: 'return_method',
  shipping_label_url: 'shipping_label_url',
  buyer_tracking_number: 'buyer_tracking_number',
  buyer_tracking_carrier: 'buyer_tracking_carrier',
  buyer_tracking_image: 'buyer_tracking_image',
  buyer_shipped_at: 'buyer_shipped_at',
  received_at: 'received_at',
  refund_processed_at: 'refund_processed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Saved_addressesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  full_name: 'full_name',
  address_line_1: 'address_line_1',
  address_line_2: 'address_line_2',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  phone: 'phone',
  is_default: 'is_default',
  label: 'label',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Saved_payment_methodsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  stripe_payment_method_id: 'stripe_payment_method_id',
  card_brand: 'card_brand',
  card_last4: 'card_last4',
  card_exp_month: 'card_exp_month',
  card_exp_year: 'card_exp_year',
  is_default: 'is_default',
  label: 'label',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Seller_credit_ledgersScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  label_id: 'label_id',
  order_id: 'order_id',
  type: 'type',
  amount_usd: 'amount_usd',
  balance_after: 'balance_after',
  source: 'source',
  metadata: 'metadata',
  currency: 'currency',
  exchange_rate: 'exchange_rate',
  created_at: 'created_at',
  stripe_session_id: 'stripe_session_id'
};

exports.Prisma.Seller_homepagesScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  status: 'status',
  template_key: 'template_key',
  desktop_config: 'desktop_config',
  mobile_config: 'mobile_config',
  hero_media_id: 'hero_media_id',
  hero_media_type: 'hero_media_type',
  headline: 'headline',
  body_copy: 'body_copy',
  selected_cta_id: 'selected_cta_id',
  music_track_id: 'music_track_id',
  music_enabled: 'music_enabled',
  auto_redirect_to_homepage: 'auto_redirect_to_homepage',
  last_published_at: 'last_published_at',
  published_desktop_config: 'published_desktop_config',
  published_mobile_config: 'published_mobile_config',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SessionsScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.Shipping_label_refundsScalarFieldEnum = {
  id: 'id',
  label_id: 'label_id',
  shippo_refund_id: 'shippo_refund_id',
  status: 'status',
  requested_at: 'requested_at',
  resolved_at: 'resolved_at',
  rejection_reason: 'rejection_reason',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Shipping_labelsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  seller_id: 'seller_id',
  shippo_transaction_id: 'shippo_transaction_id',
  shippo_rate_id: 'shippo_rate_id',
  base_cost_usd: 'base_cost_usd',
  markup_percent: 'markup_percent',
  total_charged_usd: 'total_charged_usd',
  label_url: 'label_url',
  tracking_number: 'tracking_number',
  carrier: 'carrier',
  service_level_name: 'service_level_name',
  status: 'status',
  purchased_at: 'purchased_at',
  voided_at: 'voided_at',
  currency: 'currency',
  exchange_rate_applied: 'exchange_rate_applied',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Shipping_matricesScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Shipping_zonesScalarFieldEnum = {
  id: 'id',
  matrix_id: 'matrix_id',
  zone_type: 'zone_type',
  zone_name: 'zone_name',
  zone_code: 'zone_code',
  rate: 'rate',
  estimated_days: 'estimated_days',
  zone_identifier: 'zone_identifier',
  metadata: 'metadata'
};

exports.Prisma.Stock_reservationsScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  variant_id: 'variant_id',
  quantity: 'quantity',
  order_id: 'order_id',
  session_id: 'session_id',
  user_id: 'user_id',
  status: 'status',
  expires_at: 'expires_at',
  created_at: 'created_at',
  committed_at: 'committed_at',
  released_at: 'released_at'
};

exports.Prisma.Store_invitationsScalarFieldEnum = {
  id: 'id',
  store_owner_id: 'store_owner_id',
  invitee_email: 'invitee_email',
  invited_by_user_id: 'invited_by_user_id',
  status: 'status',
  token: 'token',
  expires_at: 'expires_at',
  accepted_at: 'accepted_at',
  created_at: 'created_at'
};

exports.Prisma.Subscriber_engagementScalarFieldEnum = {
  id: 'id',
  subscriber_id: 'subscriber_id',
  engagement_score: 'engagement_score',
  last_opened_at: 'last_opened_at',
  last_clicked_at: 'last_clicked_at',
  total_opens: 'total_opens',
  total_clicks: 'total_clicks',
  total_sent: 'total_sent',
  updated_at: 'updated_at'
};

exports.Prisma.Subscriber_group_membershipsScalarFieldEnum = {
  id: 'id',
  subscriber_id: 'subscriber_id',
  group_id: 'group_id',
  created_at: 'created_at'
};

exports.Prisma.Subscriber_groupsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.SubscribersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  name: 'name',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Team_invitationsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  store_owner_id: 'store_owner_id',
  capabilities: 'capabilities',
  status: 'status',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at',
  accepted_at: 'accepted_at'
};

exports.Prisma.Tiktok_settingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  refresh_token: 'refresh_token',
  advertiser_id: 'advertiser_id',
  advertiser_name: 'advertiser_name',
  connected: 'connected',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Trade_payment_schedulesScalarFieldEnum = {
  id: 'id',
  quotation_id: 'quotation_id',
  payment_type: 'payment_type',
  amount: 'amount',
  due_date: 'due_date',
  status: 'status',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  paid_at: 'paid_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Trade_quotation_eventsScalarFieldEnum = {
  id: 'id',
  quotation_id: 'quotation_id',
  event_type: 'event_type',
  performed_by: 'performed_by',
  payload: 'payload',
  created_at: 'created_at'
};

exports.Prisma.Trade_quotation_itemsScalarFieldEnum = {
  id: 'id',
  quotation_id: 'quotation_id',
  line_number: 'line_number',
  description: 'description',
  product_id: 'product_id',
  unit_price: 'unit_price',
  quantity: 'quantity',
  line_total: 'line_total',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Trade_quotationsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  buyer_email: 'buyer_email',
  buyer_id: 'buyer_id',
  quotation_number: 'quotation_number',
  currency: 'currency',
  subtotal: 'subtotal',
  tax_amount: 'tax_amount',
  shipping_amount: 'shipping_amount',
  total: 'total',
  deposit_amount: 'deposit_amount',
  deposit_percentage: 'deposit_percentage',
  balance_amount: 'balance_amount',
  status: 'status',
  valid_until: 'valid_until',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at',
  order_id: 'order_id',
  delivery_terms: 'delivery_terms',
  data_sheet_url: 'data_sheet_url',
  terms_and_conditions_url: 'terms_and_conditions_url'
};

exports.Prisma.Trustpilot_reviewsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  trustpilot_review_id: 'trustpilot_review_id',
  stars: 'stars',
  title: 'title',
  content: 'content',
  reviewer_name: 'reviewer_name',
  reviewer_country: 'reviewer_country',
  verified_buyer: 'verified_buyer',
  product_id: 'product_id',
  product_sku: 'product_sku',
  review_date: 'review_date',
  language: 'language',
  reply_text: 'reply_text',
  reply_date: 'reply_date',
  is_visible: 'is_visible',
  is_featured: 'is_featured',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Trustpilot_tokensScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  refresh_token: 'refresh_token',
  token_type: 'token_type',
  expires_at: 'expires_at',
  business_unit_id: 'business_unit_id',
  business_name: 'business_name',
  auto_sync: 'auto_sync',
  last_sync_at: 'last_sync_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_store_membershipsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  store_owner_id: 'store_owner_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  access_level: 'access_level',
  invited_by: 'invited_by'
};

exports.Prisma.User_store_rolesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  store_owner_id: 'store_owner_id',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  first_name: 'first_name',
  last_name: 'last_name',
  profile_image_url: 'profile_image_url',
  password: 'password',
  role: 'role',
  seller_id: 'seller_id',
  invited_by: 'invited_by',
  store_banner: 'store_banner',
  store_logo: 'store_logo',
  payment_provider: 'payment_provider',
  stripe_connected_account_id: 'stripe_connected_account_id',
  stripe_charges_enabled: 'stripe_charges_enabled',
  stripe_payouts_enabled: 'stripe_payouts_enabled',
  stripe_details_submitted: 'stripe_details_submitted',
  listing_currency: 'listing_currency',
  stripe_customer_id: 'stripe_customer_id',
  stripe_subscription_id: 'stripe_subscription_id',
  subscription_status: 'subscription_status',
  subscription_plan: 'subscription_plan',
  trial_ends_at: 'trial_ends_at',
  paypal_merchant_id: 'paypal_merchant_id',
  paypal_partner_id: 'paypal_partner_id',
  custom_domain: 'custom_domain',
  custom_domain_verified: 'custom_domain_verified',
  instagram_user_id: 'instagram_user_id',
  instagram_username: 'instagram_username',
  instagram_access_token: 'instagram_access_token',
  shipping_price: 'shipping_price',
  store_active: 'store_active',
  shipping_policy: 'shipping_policy',
  returns_policy: 'returns_policy',
  contact_email: 'contact_email',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tax_enabled: 'tax_enabled',
  tax_nexus_countries: 'tax_nexus_countries',
  tax_nexus_states: 'tax_nexus_states',
  tax_product_code: 'tax_product_code',
  is_platform_admin: 'is_platform_admin',
  about_story: 'about_story',
  social_instagram: 'social_instagram',
  social_twitter: 'social_twitter',
  social_tiktok: 'social_tiktok',
  social_snapchat: 'social_snapchat',
  social_website: 'social_website',
  welcome_email_sent: 'welcome_email_sent',
  user_type: 'user_type',
  company_name: 'company_name',
  business_type: 'business_type',
  tax_id: 'tax_id',
  terms_pdf_url: 'terms_pdf_url',
  terms_source: 'terms_source',
  warehouse_street: 'warehouse_street',
  warehouse_city: 'warehouse_city',
  warehouse_state: 'warehouse_state',
  warehouse_postal_code: 'warehouse_postal_code',
  warehouse_country: 'warehouse_country',
  business_phone: 'business_phone',
  warehouse_address_line1: 'warehouse_address_line1',
  warehouse_address_line2: 'warehouse_address_line2',
  warehouse_address_city: 'warehouse_address_city',
  warehouse_address_state: 'warehouse_address_state',
  warehouse_address_postal_code: 'warehouse_address_postal_code',
  warehouse_address_country_code: 'warehouse_address_country_code',
  warehouse_address_country_name: 'warehouse_address_country_name',
  warehouse_address_latitude: 'warehouse_address_latitude',
  warehouse_address_longitude: 'warehouse_address_longitude',
  warehouse_address_validated_source: 'warehouse_address_validated_source',
  warehouse_address_validated_at: 'warehouse_address_validated_at',
  shippo_address_object_id: 'shippo_address_object_id',
  pending_label_credit_usd: 'pending_label_credit_usd'
};

exports.Prisma.Warehouse_addressesScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  name: 'name',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country_code: 'country_code',
  country_name: 'country_name',
  phone: 'phone',
  latitude: 'latitude',
  longitude: 'longitude',
  validated_source: 'validated_source',
  validated_at: 'validated_at',
  shippo_address_object_id: 'shippo_address_object_id',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Warehouse_locationsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  name: 'name',
  address: 'address',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  contact_email: 'contact_email',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Webhook_eventsScalarFieldEnum = {
  id: 'id',
  provider_name: 'provider_name',
  event_type: 'event_type',
  payload: 'payload',
  processed_at: 'processed_at',
  created_at: 'created_at'
};

exports.Prisma.Wholesale_access_grantsScalarFieldEnum = {
  id: 'id',
  buyer_id: 'buyer_id',
  seller_id: 'seller_id',
  status: 'status',
  wholesale_terms: 'wholesale_terms',
  created_at: 'created_at',
  revoked_at: 'revoked_at'
};

exports.Prisma.Wholesale_cartsScalarFieldEnum = {
  id: 'id',
  buyer_id: 'buyer_id',
  seller_id: 'seller_id',
  items: 'items',
  created_at: 'created_at',
  updated_at: 'updated_at',
  currency: 'currency'
};

exports.Prisma.Wholesale_invitationsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  buyer_email: 'buyer_email',
  buyer_name: 'buyer_name',
  status: 'status',
  token: 'token',
  created_at: 'created_at',
  accepted_at: 'accepted_at',
  wholesale_terms: 'wholesale_terms',
  expires_at: 'expires_at'
};

exports.Prisma.Wholesale_order_eventsScalarFieldEnum = {
  id: 'id',
  wholesale_order_id: 'wholesale_order_id',
  event_type: 'event_type',
  payload: 'payload',
  description: 'description',
  performed_by: 'performed_by',
  occurred_at: 'occurred_at'
};

exports.Prisma.Wholesale_order_itemsScalarFieldEnum = {
  id: 'id',
  wholesale_order_id: 'wholesale_order_id',
  product_id: 'product_id',
  product_name: 'product_name',
  product_image: 'product_image',
  product_sku: 'product_sku',
  quantity: 'quantity',
  moq: 'moq',
  unit_price_cents: 'unit_price_cents',
  subtotal_cents: 'subtotal_cents',
  variant: 'variant',
  created_at: 'created_at',
  updated_at: 'updated_at',
  refunded_quantity: 'refunded_quantity',
  refunded_amount_cents: 'refunded_amount_cents'
};

exports.Prisma.Wholesale_ordersScalarFieldEnum = {
  id: 'id',
  order_number: 'order_number',
  seller_id: 'seller_id',
  buyer_id: 'buyer_id',
  status: 'status',
  subtotal_cents: 'subtotal_cents',
  tax_amount_cents: 'tax_amount_cents',
  total_cents: 'total_cents',
  currency: 'currency',
  deposit_amount_cents: 'deposit_amount_cents',
  balance_amount_cents: 'balance_amount_cents',
  deposit_percentage: 'deposit_percentage',
  balance_percentage: 'balance_percentage',
  payment_terms: 'payment_terms',
  expected_ship_date: 'expected_ship_date',
  balance_payment_due_date: 'balance_payment_due_date',
  order_deadline: 'order_deadline',
  po_number: 'po_number',
  vat_number: 'vat_number',
  incoterms: 'incoterms',
  buyer_company_name: 'buyer_company_name',
  buyer_email: 'buyer_email',
  buyer_name: 'buyer_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  exchange_rate: 'exchange_rate'
};

exports.Prisma.Wholesale_payment_intentsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  type: 'type',
  stripePaymentIntentId: 'stripePaymentIntentId',
  amountCents: 'amountCents',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Wholesale_paymentsScalarFieldEnum = {
  id: 'id',
  wholesale_order_id: 'wholesale_order_id',
  payment_type: 'payment_type',
  status: 'status',
  amount_cents: 'amount_cents',
  currency: 'currency',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  due_date: 'due_date',
  requested_at: 'requested_at',
  paid_at: 'paid_at',
  email_sent_at: 'email_sent_at',
  last_reminder_at: 'last_reminder_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  exchange_rate: 'exchange_rate'
};

exports.Prisma.Wholesale_productsScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  product_id: 'product_id',
  name: 'name',
  description: 'description',
  image: 'image',
  images: 'images',
  category: 'category',
  rrp: 'rrp',
  wholesale_price: 'wholesale_price',
  moq: 'moq',
  deposit_amount: 'deposit_amount',
  requires_deposit: 'requires_deposit',
  stock: 'stock',
  readiness_days: 'readiness_days',
  variants: 'variants',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deposit_percentage: 'deposit_percentage',
  balance_percentage: 'balance_percentage',
  expected_ship_date: 'expected_ship_date',
  balance_payment_date: 'balance_payment_date',
  order_deadline: 'order_deadline',
  ship_from_address: 'ship_from_address',
  contact_details: 'contact_details',
  suggested_retail_price: 'suggested_retail_price',
  payment_terms: 'payment_terms',
  sku: 'sku',
  readiness_type: 'readiness_type',
  readiness_value: 'readiness_value',
  balance_payment_terms: 'balance_payment_terms',
  terms_and_conditions_url: 'terms_and_conditions_url',
  category_level_1_id: 'category_level_1_id',
  category_level_2_id: 'category_level_2_id',
  category_level_3_id: 'category_level_3_id',
  status: 'status'
};

exports.Prisma.Wholesale_shipping_detailsScalarFieldEnum = {
  id: 'id',
  wholesale_order_id: 'wholesale_order_id',
  shipping_type: 'shipping_type',
  carrier_name: 'carrier_name',
  carrier_account_number: 'carrier_account_number',
  prepaid_label_urls: 'prepaid_label_urls',
  service_level: 'service_level',
  pickup_address: 'pickup_address',
  pickup_contact_name: 'pickup_contact_name',
  pickup_contact_phone: 'pickup_contact_phone',
  pickup_contact_email: 'pickup_contact_email',
  invoicing_address: 'invoicing_address',
  invoicing_name: 'invoicing_name',
  invoicing_email: 'invoicing_email',
  invoicing_phone: 'invoicing_phone',
  remember_invoicing: 'remember_invoicing',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wholesale_shipping_metadataScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  shippingType: 'shippingType',
  freightAccount: 'freightAccount',
  carrier: 'carrier',
  trackingNumber: 'trackingNumber',
  pickupAddress: 'pickupAddress',
  pickupInstructions: 'pickupInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.X_settingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  access_token_secret: 'access_token_secret',
  account_id: 'account_id',
  account_name: 'account_name',
  connected: 'connected',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Test_audit_logScalarFieldEnum = {
  id: 'id',
  table_name: 'table_name',
  operation: 'operation',
  row_id: 'row_id',
  old_data: 'old_data',
  new_data: 'new_data',
  changed_at: 'changed_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.background_job_status = exports.$Enums.background_job_status = {
  pending: 'pending',
  running: 'running',
  completed: 'completed',
  failed: 'failed',
  retrying: 'retrying'
};

exports.balance_request_status = exports.$Enums.balance_request_status = {
  pending: 'pending',
  requested: 'requested',
  paid: 'paid',
  failed: 'failed',
  cancelled: 'cancelled'
};

exports.bulk_upload_item_status = exports.$Enums.bulk_upload_item_status = {
  pending: 'pending',
  valid: 'valid',
  warning: 'warning',
  error: 'error',
  imported: 'imported',
  failed: 'failed'
};

exports.bulk_upload_status = exports.$Enums.bulk_upload_status = {
  pending: 'pending',
  preprocessed: 'preprocessed',
  validating: 'validating',
  validated: 'validated',
  importing: 'importing',
  completed: 'completed',
  completed_with_errors: 'completed_with_errors',
  failed: 'failed',
  rolled_back: 'rolled_back'
};

exports.CartStatus = exports.$Enums.CartStatus = {
  active: 'active',
  converted: 'converted',
  expired: 'expired'
};

exports.domain_strategy = exports.$Enums.domain_strategy = {
  cloudflare: 'cloudflare',
  manual: 'manual'
};

exports.domain_status = exports.$Enums.domain_status = {
  pending_verification: 'pending_verification',
  dns_verified: 'dns_verified',
  ssl_provisioning: 'ssl_provisioning',
  active: 'active',
  error: 'error',
  deactivated: 'deactivated'
};

exports.meta_ad_account_status = exports.$Enums.meta_ad_account_status = {
  pending_oauth: 'pending_oauth',
  connected: 'connected',
  token_expired: 'token_expired',
  disconnected: 'disconnected',
  suspended: 'suspended'
};

exports.meta_transaction_type = exports.$Enums.meta_transaction_type = {
  credit_purchase: 'credit_purchase',
  ad_spend: 'ad_spend',
  upfirst_fee: 'upfirst_fee',
  refund: 'refund',
  adjustment: 'adjustment'
};

exports.meta_campaign_status = exports.$Enums.meta_campaign_status = {
  draft: 'draft',
  pending_payment: 'pending_payment',
  active: 'active',
  paused: 'paused',
  completed: 'completed',
  cancelled: 'cancelled',
  failed: 'failed'
};

exports.meta_campaign_objective = exports.$Enums.meta_campaign_objective = {
  OUTCOME_TRAFFIC: 'OUTCOME_TRAFFIC',
  OUTCOME_ENGAGEMENT: 'OUTCOME_ENGAGEMENT',
  OUTCOME_LEADS: 'OUTCOME_LEADS',
  OUTCOME_SALES: 'OUTCOME_SALES'
};

exports.order_balance_payment_status = exports.$Enums.order_balance_payment_status = {
  pending: 'pending',
  requested: 'requested',
  paid: 'paid',
  failed: 'failed',
  cancelled: 'cancelled'
};

exports.order_event_type = exports.$Enums.order_event_type = {
  status_change: 'status_change',
  email_sent: 'email_sent',
  payment_received: 'payment_received',
  refund_processed: 'refund_processed',
  tracking_updated: 'tracking_updated',
  balance_payment_requested: 'balance_payment_requested',
  balance_payment_received: 'balance_payment_received',
  document_generated: 'document_generated'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  processing: 'processing',
  fulfilled: 'fulfilled',
  cancelled: 'cancelled',
  refunded: 'refunded',
  paid: 'paid',
  awaiting_payment: 'awaiting_payment',
  awaiting_balance: 'awaiting_balance',
  balance_overdue: 'balance_overdue',
  deposit_paid: 'deposit_paid',
  in_production: 'in_production',
  ready_to_ship: 'ready_to_ship'
};

exports.workflow_event_type = exports.$Enums.workflow_event_type = {
  WORKFLOW_STARTED: 'WORKFLOW_STARTED',
  STATE_TRANSITION: 'STATE_TRANSITION',
  STEP_COMPLETED: 'STEP_COMPLETED',
  STEP_FAILED: 'STEP_FAILED',
  COMPENSATION_TRIGGERED: 'COMPENSATION_TRIGGERED',
  RETRY_ATTEMPTED: 'RETRY_ATTEMPTED',
  WORKFLOW_COMPLETED: 'WORKFLOW_COMPLETED',
  WORKFLOW_FAILED: 'WORKFLOW_FAILED'
};

exports.workflow_state = exports.$Enums.workflow_state = {
  INIT: 'INIT',
  CART_VALIDATED: 'CART_VALIDATED',
  SELLER_VERIFIED: 'SELLER_VERIFIED',
  SHIPPING_PRICED: 'SHIPPING_PRICED',
  PRICING_COMPUTED: 'PRICING_COMPUTED',
  INVENTORY_RESERVED: 'INVENTORY_RESERVED',
  PAYMENT_INTENT_CREATED: 'PAYMENT_INTENT_CREATED',
  ORDER_CREATED: 'ORDER_CREATED',
  AWAITING_PAYMENT_CONFIRMATION: 'AWAITING_PAYMENT_CONFIRMATION',
  PAYMENT_CONFIRMED: 'PAYMENT_CONFIRMED',
  INVENTORY_COMMITTED: 'INVENTORY_COMMITTED',
  NOTIFICATIONS_SENT: 'NOTIFICATIONS_SENT',
  COMPLETED: 'COMPLETED',
  FAILURE: 'FAILURE',
  CANCELLED: 'CANCELLED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  draft: 'draft',
  active: 'active',
  coming_soon: 'coming_soon',
  paused: 'paused',
  out_of_stock: 'out_of_stock',
  archived: 'archived'
};

exports.refund_line_item_type = exports.$Enums.refund_line_item_type = {
  product: 'product',
  shipping: 'shipping',
  tax: 'tax',
  adjustment: 'adjustment'
};

exports.seller_credit_ledger_type = exports.$Enums.seller_credit_ledger_type = {
  debit: 'debit',
  credit: 'credit',
  adjustment: 'adjustment'
};

exports.seller_credit_ledger_source = exports.$Enums.seller_credit_ledger_source = {
  label_refund: 'label_refund',
  label_purchase: 'label_purchase',
  manual: 'manual',
  settlement_fix: 'settlement_fix'
};

exports.shipping_label_refund_status = exports.$Enums.shipping_label_refund_status = {
  queued: 'queued',
  pending: 'pending',
  success: 'success',
  rejected: 'rejected'
};

exports.shipping_label_status = exports.$Enums.shipping_label_status = {
  pending: 'pending',
  purchased: 'purchased',
  void_requested: 'void_requested',
  voided: 'voided',
  failed: 'failed'
};

exports.trade_payment_type = exports.$Enums.trade_payment_type = {
  deposit: 'deposit',
  balance: 'balance'
};

exports.trade_payment_status = exports.$Enums.trade_payment_status = {
  pending: 'pending',
  paid: 'paid',
  overdue: 'overdue',
  cancelled: 'cancelled'
};

exports.trade_quotation_event_type = exports.$Enums.trade_quotation_event_type = {
  created: 'created',
  sent: 'sent',
  viewed: 'viewed',
  accepted: 'accepted',
  deposit_paid: 'deposit_paid',
  balance_paid: 'balance_paid',
  expired: 'expired',
  cancelled: 'cancelled',
  email_sent: 'email_sent'
};

exports.trade_quotation_status = exports.$Enums.trade_quotation_status = {
  draft: 'draft',
  sent: 'sent',
  viewed: 'viewed',
  accepted: 'accepted',
  deposit_paid: 'deposit_paid',
  balance_due: 'balance_due',
  fully_paid: 'fully_paid',
  completed: 'completed',
  cancelled: 'cancelled',
  expired: 'expired'
};

exports.store_context_role = exports.$Enums.store_context_role = {
  buyer: 'buyer',
  seller: 'seller',
  owner: 'owner'
};

exports.user_type = exports.$Enums.user_type = {
  seller: 'seller',
  buyer: 'buyer'
};

exports.wholesale_order_event_type = exports.$Enums.wholesale_order_event_type = {
  order_created: 'order_created',
  status_change: 'status_change',
  deposit_payment_received: 'deposit_payment_received',
  balance_payment_requested: 'balance_payment_requested',
  balance_payment_received: 'balance_payment_received',
  balance_payment_overdue: 'balance_payment_overdue',
  email_sent: 'email_sent',
  tracking_updated: 'tracking_updated',
  order_fulfilled: 'order_fulfilled',
  order_cancelled: 'order_cancelled'
};

exports.wholesale_order_status = exports.$Enums.wholesale_order_status = {
  pending: 'pending',
  deposit_paid: 'deposit_paid',
  awaiting_balance: 'awaiting_balance',
  balance_overdue: 'balance_overdue',
  ready_to_release: 'ready_to_release',
  in_production: 'in_production',
  fulfilled: 'fulfilled',
  cancelled: 'cancelled'
};

exports.wholesale_payment_type = exports.$Enums.wholesale_payment_type = {
  deposit: 'deposit',
  balance: 'balance'
};

exports.wholesale_payment_intent_status = exports.$Enums.wholesale_payment_intent_status = {
  pending: 'pending',
  succeeded: 'succeeded',
  failed: 'failed',
  canceled: 'canceled'
};

exports.wholesale_payment_status = exports.$Enums.wholesale_payment_status = {
  pending: 'pending',
  requested: 'requested',
  paid: 'paid',
  failed: 'failed',
  cancelled: 'cancelled',
  overdue: 'overdue'
};

exports.wholesale_shipping_type = exports.$Enums.wholesale_shipping_type = {
  freight_collect: 'freight_collect',
  buyer_pickup: 'buyer_pickup'
};

exports.Prisma.ModelName = {
  analytics_events: 'analytics_events',
  auth_tokens: 'auth_tokens',
  automation_executions: 'automation_executions',
  background_job_runs: 'background_job_runs',
  balance_requests: 'balance_requests',
  bulk_upload_items: 'bulk_upload_items',
  bulk_upload_jobs: 'bulk_upload_jobs',
  buyer_profiles: 'buyer_profiles',
  cancellation_requests: 'cancellation_requests',
  cart_items: 'cart_items',
  cart_sessions: 'cart_sessions',
  carts: 'carts',
  categories: 'categories',
  daily_analytics: 'daily_analytics',
  domain_connections: 'domain_connections',
  failed_webhook_events: 'failed_webhook_events',
  feature_adoptions: 'feature_adoptions',
  homepage_cta_options: 'homepage_cta_options',
  homepage_media_assets: 'homepage_media_assets',
  import_job_errors: 'import_job_errors',
  import_job_logs: 'import_job_logs',
  import_jobs: 'import_jobs',
  import_sources: 'import_sources',
  invitations: 'invitations',
  invoices: 'invoices',
  meta_ad_accounts: 'meta_ad_accounts',
  meta_ad_campaigns: 'meta_ad_campaigns',
  meta_ad_payments: 'meta_ad_payments',
  meta_ad_performance: 'meta_ad_performance',
  meta_campaign_finance: 'meta_campaign_finance',
  meta_campaign_metrics_daily: 'meta_campaign_metrics_daily',
  meta_campaigns: 'meta_campaigns',
  meta_settings: 'meta_settings',
  music_tracks: 'music_tracks',
  newsletter_ab_tests: 'newsletter_ab_tests',
  newsletter_analytics: 'newsletter_analytics',
  newsletter_conversions: 'newsletter_conversions',
  newsletter_events: 'newsletter_events',
  newsletter_jobs: 'newsletter_jobs',
  newsletter_schedule: 'newsletter_schedule',
  newsletter_segments: 'newsletter_segments',
  newsletter_templates: 'newsletter_templates',
  newsletter_workflows: 'newsletter_workflows',
  newsletters: 'newsletters',
  nft_mints: 'nft_mints',
  notifications: 'notifications',
  order_address_changes: 'order_address_changes',
  order_balance_payments: 'order_balance_payments',
  order_events: 'order_events',
  order_items: 'order_items',
  order_workflow_events: 'order_workflow_events',
  order_workflows: 'order_workflows',
  orders: 'orders',
  packing_slips: 'packing_slips',
  payment_intents: 'payment_intents',
  product_source_mappings: 'product_source_mappings',
  products: 'products',
  refund_line_items: 'refund_line_items',
  refunds: 'refunds',
  return_requests: 'return_requests',
  saved_addresses: 'saved_addresses',
  saved_payment_methods: 'saved_payment_methods',
  seller_credit_ledgers: 'seller_credit_ledgers',
  seller_homepages: 'seller_homepages',
  sessions: 'sessions',
  shipping_label_refunds: 'shipping_label_refunds',
  shipping_labels: 'shipping_labels',
  shipping_matrices: 'shipping_matrices',
  shipping_zones: 'shipping_zones',
  stock_reservations: 'stock_reservations',
  store_invitations: 'store_invitations',
  subscriber_engagement: 'subscriber_engagement',
  subscriber_group_memberships: 'subscriber_group_memberships',
  subscriber_groups: 'subscriber_groups',
  subscribers: 'subscribers',
  team_invitations: 'team_invitations',
  tiktok_settings: 'tiktok_settings',
  trade_payment_schedules: 'trade_payment_schedules',
  trade_quotation_events: 'trade_quotation_events',
  trade_quotation_items: 'trade_quotation_items',
  trade_quotations: 'trade_quotations',
  trustpilot_reviews: 'trustpilot_reviews',
  trustpilot_tokens: 'trustpilot_tokens',
  user_store_memberships: 'user_store_memberships',
  user_store_roles: 'user_store_roles',
  users: 'users',
  warehouse_addresses: 'warehouse_addresses',
  warehouse_locations: 'warehouse_locations',
  webhook_events: 'webhook_events',
  wholesale_access_grants: 'wholesale_access_grants',
  wholesale_carts: 'wholesale_carts',
  wholesale_invitations: 'wholesale_invitations',
  wholesale_order_events: 'wholesale_order_events',
  wholesale_order_items: 'wholesale_order_items',
  wholesale_orders: 'wholesale_orders',
  wholesale_payment_intents: 'wholesale_payment_intents',
  wholesale_payments: 'wholesale_payments',
  wholesale_products: 'wholesale_products',
  wholesale_shipping_details: 'wholesale_shipping_details',
  wholesale_shipping_metadata: 'wholesale_shipping_metadata',
  x_settings: 'x_settings',
  test_audit_log: 'test_audit_log'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
